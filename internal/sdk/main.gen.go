// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package sdk

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/iancoleman/orderedmap"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ApiKeyPreviewApiKeySysType.
const (
	ApiKeyPreviewApiKeySysTypePreviewApiKey ApiKeyPreviewApiKeySysType = "PreviewApiKey"
)

// Defines values for ApiKeyCollectionSysType.
const (
	ApiKeyCollectionSysTypeArray ApiKeyCollectionSysType = "Array"
)

// Defines values for AppDefinitionParametersInstallationParameterType.
const (
	AppDefinitionParametersInstallationParameterTypeBoolean AppDefinitionParametersInstallationParameterType = "Boolean"
	AppDefinitionParametersInstallationParameterTypeNumber  AppDefinitionParametersInstallationParameterType = "Number"
	AppDefinitionParametersInstallationParameterTypeObject  AppDefinitionParametersInstallationParameterType = "Object"
	AppDefinitionParametersInstallationParameterTypeSymbol  AppDefinitionParametersInstallationParameterType = "Symbol"
)

// Defines values for AppDefinitionParametersInstanceParameterType.
const (
	AppDefinitionParametersInstanceParameterTypeBoolean AppDefinitionParametersInstanceParameterType = "Boolean"
	AppDefinitionParametersInstanceParameterTypeNumber  AppDefinitionParametersInstanceParameterType = "Number"
	AppDefinitionParametersInstanceParameterTypeObject  AppDefinitionParametersInstanceParameterType = "Object"
	AppDefinitionParametersInstanceParameterTypeSymbol  AppDefinitionParametersInstanceParameterType = "Symbol"
)

// Defines values for AppDefinitionCollectionSysType.
const (
	AppDefinitionCollectionSysTypeArray AppDefinitionCollectionSysType = "Array"
)

// Defines values for AppDefinitionLinkSysLinkType.
const (
	AppDefinitionLinkSysLinkTypeAppDefinition AppDefinitionLinkSysLinkType = "AppDefinition"
)

// Defines values for AppDefinitionLinkSysType.
const (
	AppDefinitionLinkSysTypeLink AppDefinitionLinkSysType = "Link"
)

// Defines values for AppFieldTypeLinkType.
const (
	AppFieldTypeLinkTypeAsset AppFieldTypeLinkType = "Asset"
	AppFieldTypeLinkTypeEntry AppFieldTypeLinkType = "Entry"
)

// Defines values for AppFieldTypeType.
const (
	AppFieldTypeTypeBoolean  AppFieldTypeType = "Boolean"
	AppFieldTypeTypeDate     AppFieldTypeType = "Date"
	AppFieldTypeTypeInteger  AppFieldTypeType = "Integer"
	AppFieldTypeTypeLink     AppFieldTypeType = "Link"
	AppFieldTypeTypeLocation AppFieldTypeType = "Location"
	AppFieldTypeTypeNumber   AppFieldTypeType = "Number"
	AppFieldTypeTypeObject   AppFieldTypeType = "Object"
	AppFieldTypeTypeSymbol   AppFieldTypeType = "Symbol"
	AppFieldTypeTypeText     AppFieldTypeType = "Text"
)

// Defines values for AppInstallationCollectionSysType.
const (
	AppInstallationCollectionSysTypeArray AppInstallationCollectionSysType = "Array"
)

// Defines values for AssetCollectionSysType.
const (
	AssetCollectionSysTypeArray AssetCollectionSysType = "Array"
)

// Defines values for ContentTypeCollectionSysType.
const (
	ContentTypeCollectionSysTypeArray ContentTypeCollectionSysType = "Array"
)

// Defines values for EditorInterfaceControlWidgetNamespace.
const (
	EditorInterfaceControlWidgetNamespaceApp       EditorInterfaceControlWidgetNamespace = "app"
	EditorInterfaceControlWidgetNamespaceBuiltin   EditorInterfaceControlWidgetNamespace = "builtin"
	EditorInterfaceControlWidgetNamespaceExtension EditorInterfaceControlWidgetNamespace = "extension"
)

// Defines values for EditorInterfaceSidebarItemWidgetNamespace.
const (
	EditorInterfaceSidebarItemWidgetNamespaceApp       EditorInterfaceSidebarItemWidgetNamespace = "app"
	EditorInterfaceSidebarItemWidgetNamespaceBuiltin   EditorInterfaceSidebarItemWidgetNamespace = "builtin"
	EditorInterfaceSidebarItemWidgetNamespaceExtension EditorInterfaceSidebarItemWidgetNamespace = "extension"
)

// Defines values for EntryCollectionSysType.
const (
	EntryCollectionSysTypeArray EntryCollectionSysType = "Array"
)

// Defines values for EnvironmentCollectionSysType.
const (
	EnvironmentCollectionSysTypeArray EnvironmentCollectionSysType = "Array"
)

// Defines values for EnvironmentSystemPropertiesSysLinkType.
const (
	EnvironmentSystemPropertiesSysLinkTypeEnvironment EnvironmentSystemPropertiesSysLinkType = "Environment"
)

// Defines values for EnvironmentSystemPropertiesSysType.
const (
	EnvironmentSystemPropertiesSysTypeLink EnvironmentSystemPropertiesSysType = "Link"
)

// Defines values for FieldLinkType.
const (
	FieldLinkTypeAsset FieldLinkType = "Asset"
	FieldLinkTypeEntry FieldLinkType = "Entry"
)

// Defines values for FieldType.
const (
	FieldTypeArray    FieldType = "Array"
	FieldTypeBoolean  FieldType = "Boolean"
	FieldTypeDate     FieldType = "Date"
	FieldTypeInteger  FieldType = "Integer"
	FieldTypeLink     FieldType = "Link"
	FieldTypeLocation FieldType = "Location"
	FieldTypeNumber   FieldType = "Number"
	FieldTypeObject   FieldType = "Object"
	FieldTypeSymbol   FieldType = "Symbol"
	FieldTypeText     FieldType = "Text"
)

// Defines values for FieldItemLinkLinkType.
const (
	FieldItemLinkLinkTypeAsset FieldItemLinkLinkType = "Asset"
	FieldItemLinkLinkTypeEntry FieldItemLinkLinkType = "Entry"
)

// Defines values for FieldItemLinkType.
const (
	FieldItemLinkTypeLink FieldItemLinkType = "Link"
)

// Defines values for FieldItemSymbolType.
const (
	Symbol FieldItemSymbolType = "Symbol"
)

// Defines values for LocaleCollectionSysType.
const (
	LocaleCollectionSysTypeArray LocaleCollectionSysType = "Array"
)

// Defines values for PreviewApiKeyCollectionSysType.
const (
	PreviewApiKeyCollectionSysTypeArray PreviewApiKeyCollectionSysType = "Array"
)

// Defines values for SpaceCollectionSysType.
const (
	SpaceCollectionSysTypeArray SpaceCollectionSysType = "Array"
)

// Defines values for SystemPropertiesContentTypeSysLinkType.
const (
	SystemPropertiesContentTypeSysLinkTypeContentType SystemPropertiesContentTypeSysLinkType = "ContentType"
)

// Defines values for SystemPropertiesContentTypeSysType.
const (
	Link SystemPropertiesContentTypeSysType = "Link"
)

// Defines values for SystemPropertiesPreviewEnvironmentType.
const (
	SystemPropertiesPreviewEnvironmentTypePreviewEnvironment SystemPropertiesPreviewEnvironmentType = "PreviewEnvironment"
)

// Defines values for WebhookCollectionSysType.
const (
	WebhookCollectionSysTypeArray WebhookCollectionSysType = "Array"
)

// ApiKey defines model for ApiKey.
type ApiKey struct {
	// AccessToken The Content Delivery API access token
	AccessToken string `json:"accessToken"`

	// Description Description of the API key
	Description string `json:"description"`

	// Environments List of environments this API key can access
	Environments []EnvironmentSystemProperties `json:"environments"`

	// Name Name of the API key
	Name          string `json:"name"`
	PreviewApiKey *struct {
		Sys *struct {
			// Id ID of the preview API key
			Id   *string                     `json:"id,omitempty"`
			Type *ApiKeyPreviewApiKeySysType `json:"type,omitempty"`
		} `json:"sys,omitempty"`
	} `json:"preview_api_key,omitempty"`
	Sys SystemProperties `json:"sys"`
}

// ApiKeyPreviewApiKeySysType defines model for ApiKey.PreviewApiKey.Sys.Type.
type ApiKeyPreviewApiKeySysType string

// ApiKeyCollection defines model for ApiKeyCollection.
type ApiKeyCollection struct {
	Items *[]ApiKey `json:"items,omitempty"`

	// Limit Maximum number of API keys returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of API keys skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *ApiKeyCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of API keys
	Total *int `json:"total,omitempty"`
}

// ApiKeyCollectionSysType defines model for ApiKeyCollection.Sys.Type.
type ApiKeyCollectionSysType string

// ApiKeyDraft defines model for ApiKeyDraft.
type ApiKeyDraft struct {
	// Description Description of the API key
	Description string `json:"description"`

	// Environments List of environments this API key can access
	Environments *[]EnvironmentSystemProperties `json:"environments,omitempty"`

	// Name Name of the API key
	Name string `json:"name"`
}

// AppBundleDraft defines model for AppBundleDraft.
type AppBundleDraft struct {
	// Comment Name of the app bundle
	Comment string               `json:"comment"`
	Upload  AppBundleDraftUpload `json:"upload"`
}

// AppBundleDraftUpload defines model for AppBundleDraftUpload.
type AppBundleDraftUpload struct {
	Sys SystemPropertiesLink `json:"sys"`
}

// AppDefinition defines model for AppDefinition.
type AppDefinition struct {
	Bundle *AppDefinitionBundle `json:"bundle,omitempty"`

	// Locations Locations where the app can be installed
	Locations []AppLocation `json:"locations"`

	// Name Name of the app
	Name       string `json:"name"`
	Parameters *struct {
		InstallationParameter *struct {
			// Default Default value of the parameter
			Default *map[string]interface{} `json:"default,omitempty"`

			// Description Description of the parameter
			Description *string `json:"description,omitempty"`

			// Name Name of the parameter
			Name string `json:"name"`

			// Required Whether the parameter is required
			Required *bool                                            `json:"required,omitempty"`
			Type     AppDefinitionParametersInstallationParameterType `json:"type"`
		} `json:"installationParameter,omitempty"`
		InstanceParameter *struct {
			// Default Default value of the parameter
			Default *map[string]interface{} `json:"default,omitempty"`

			// Description Description of the parameter
			Description *string `json:"description,omitempty"`

			// Name Name of the parameter
			Name string `json:"name"`

			// Required Whether the parameter is required
			Required *bool                                        `json:"required,omitempty"`
			Type     AppDefinitionParametersInstanceParameterType `json:"type"`
		} `json:"instanceParameter,omitempty"`
	} `json:"parameters,omitempty"`

	// Src URL of the app
	Src *string                       `json:"src,omitempty"`
	Sys SystemPropertiesAppDefinition `json:"sys"`
}

// AppDefinitionParametersInstallationParameterType defines model for AppDefinition.Parameters.InstallationParameter.Type.
type AppDefinitionParametersInstallationParameterType string

// AppDefinitionParametersInstanceParameterType defines model for AppDefinition.Parameters.InstanceParameter.Type.
type AppDefinitionParametersInstanceParameterType string

// AppDefinitionBundle defines model for AppDefinitionBundle.
type AppDefinitionBundle struct {
	Sys *SystemPropertiesLink `json:"sys,omitempty"`
}

// AppDefinitionCollection defines model for AppDefinitionCollection.
type AppDefinitionCollection struct {
	Items *[]AppDefinition `json:"items,omitempty"`

	// Limit Maximum number of app definitions returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of app definitions skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *AppDefinitionCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of app definitions
	Total *int `json:"total,omitempty"`
}

// AppDefinitionCollectionSysType defines model for AppDefinitionCollection.Sys.Type.
type AppDefinitionCollectionSysType string

// AppDefinitionDraft defines model for AppDefinitionDraft.
type AppDefinitionDraft struct {
	Bundle *AppDefinitionBundle `json:"bundle,omitempty"`

	// Locations Locations where the app can be installed
	Locations []AppLocation `json:"locations"`

	// Name Name of the app
	Name       string                 `json:"name"`
	Parameters map[string]interface{} `json:"parameters"`

	// Src URL of the app
	Src *string `json:"src,omitempty"`
}

// AppDefinitionLink defines model for AppDefinitionLink.
type AppDefinitionLink struct {
	Sys struct {
		// Id ID of the app definition
		Id       *string                       `json:"id,omitempty"`
		LinkType *AppDefinitionLinkSysLinkType `json:"linkType,omitempty"`
		Type     *AppDefinitionLinkSysType     `json:"type,omitempty"`
	} `json:"sys"`
}

// AppDefinitionLinkSysLinkType defines model for AppDefinitionLink.Sys.LinkType.
type AppDefinitionLinkSysLinkType string

// AppDefinitionLinkSysType defines model for AppDefinitionLink.Sys.Type.
type AppDefinitionLinkSysType string

// AppFieldType defines model for AppFieldType.
type AppFieldType struct {
	Items    *FieldItem            `json:"items,omitempty"`
	LinkType *AppFieldTypeLinkType `json:"linkType,omitempty"`
	Type     AppFieldTypeType      `json:"type"`
}

// AppFieldTypeLinkType defines model for AppFieldType.LinkType.
type AppFieldTypeLinkType string

// AppFieldTypeType defines model for AppFieldType.Type.
type AppFieldTypeType string

// AppInstallation defines model for AppInstallation.
type AppInstallation struct {
	AppDefinition AppDefinitionLink `json:"appDefinition"`

	// Locations Locations where the app is installed
	Locations *[]AppLocation `json:"locations,omitempty"`

	// Parameters Configuration parameters for the app installation
	Parameters map[string]interface{} `json:"parameters"`

	// Srcdoc HTML source code for custom apps
	Srcdoc *string                       `json:"srcdoc,omitempty"`
	Sys    SystemPropertiesAppDefinition `json:"sys"`
}

// AppInstallationCollection defines model for AppInstallationCollection.
type AppInstallationCollection struct {
	Items *[]AppInstallation `json:"items,omitempty"`

	// Limit Maximum number of app installations returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of app installations skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *AppInstallationCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of app installations
	Total *int `json:"total,omitempty"`
}

// AppInstallationCollectionSysType defines model for AppInstallationCollection.Sys.Type.
type AppInstallationCollectionSysType string

// AppInstallationUpsert defines model for AppInstallationUpsert.
type AppInstallationUpsert struct {
	// Parameters Configuration parameters for the app installation
	Parameters map[string]interface{} `json:"parameters"`

	// Srcdoc HTML source code for custom apps
	Srcdoc *string `json:"srcdoc,omitempty"`
}

// AppLocation defines model for AppLocation.
type AppLocation struct {
	// FieldTypes Field types that this app can be installed on (for entry-field location)
	FieldTypes []AppFieldType `json:"fieldTypes"`

	// Location Location where the app can be installed
	Location       string             `json:"location"`
	NavigationItem *AppNavigationItem `json:"navigationItem,omitempty"`
}

// AppNavigationItem defines model for AppNavigationItem.
type AppNavigationItem struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

// Asset defines model for Asset.
type Asset struct {
	Fields struct {
		// Description Asset description by locale
		Description map[string]string `json:"description"`

		// File Asset file details by locale
		File map[string]struct {
			ContentType string `json:"contentType"`
			Details     *struct {
				Image *struct {
					Height *int64 `json:"height,omitempty"`
					Width  *int64 `json:"width,omitempty"`
				} `json:"image,omitempty"`
				Size *int64 `json:"size,omitempty"`
			} `json:"details,omitempty"`
			FileName string  `json:"fileName"`
			Upload   *string `json:"upload,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"file"`

		// Title Asset title by locale
		Title map[string]string `json:"title"`
	} `json:"fields"`
	Sys SystemPropertiesContent `json:"sys"`
}

// AssetCollection defines model for AssetCollection.
type AssetCollection struct {
	Items *[]Asset `json:"items,omitempty"`

	// Limit Maximum number of assets returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of assets skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *AssetCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of assets
	Total *int `json:"total,omitempty"`
}

// AssetCollectionSysType defines model for AssetCollection.Sys.Type.
type AssetCollectionSysType string

// AssetCreate defines model for AssetCreate.
type AssetCreate struct {
	Fields *AssetField `json:"fields,omitempty"`
}

// AssetField defines model for AssetField.
type AssetField struct {
	// Description Asset description by locale
	Description map[string]string    `json:"description"`
	File        map[string]AssetFile `json:"file"`

	// Title Asset title by locale
	Title map[string]string `json:"title"`
}

// AssetFile Asset file details by locale
type AssetFile struct {
	ContentType string `json:"contentType"`
	FileName    string `json:"fileName"`

	// Upload Upload URL
	Upload string `json:"upload"`
}

// ContentType defines model for ContentType.
type ContentType struct {
	// Description Description of the content type
	Description *string `json:"description,omitempty"`

	// DisplayField ID of the field to use as the display field
	DisplayField string  `json:"displayField"`
	Fields       []Field `json:"fields"`

	// Name Name of the content type
	Name string                   `json:"name"`
	Sys  SystemPropertiesResource `json:"sys"`
}

// ContentTypeCollection defines model for ContentTypeCollection.
type ContentTypeCollection struct {
	Items []ContentType `json:"items"`

	// Limit Maximum number of content types returned
	Limit int `json:"limit"`

	// Skip Number of content types skipped
	Skip int `json:"skip"`
	Sys  struct {
		Type *ContentTypeCollectionSysType `json:"type,omitempty"`
	} `json:"sys"`

	// Total Total number of content types
	Total int `json:"total"`
}

// ContentTypeCollectionSysType defines model for ContentTypeCollection.Sys.Type.
type ContentTypeCollectionSysType string

// ContentTypeCreate defines model for ContentTypeCreate.
type ContentTypeCreate struct {
	// Description Description of the content type
	Description *string `json:"description,omitempty"`

	// DisplayField ID of the field to use as the display field
	DisplayField string  `json:"displayField"`
	Fields       []Field `json:"fields"`

	// Name Name of the content type
	Name string `json:"name"`
}

// ContentTypeUpdate defines model for ContentTypeUpdate.
type ContentTypeUpdate struct {
	// Description Description of the content type
	Description *string `json:"description,omitempty"`

	// DisplayField ID of the field to use as the display field
	DisplayField string  `json:"displayField"`
	Fields       []Field `json:"fields"`

	// Name Name of the content type
	Name string `json:"name"`
}

// EditorInterface defines model for EditorInterface.
type EditorInterface struct {
	// Controls Controls for each field in the content type
	Controls []EditorInterfaceControl `json:"controls"`

	// EditorLayout To be implemented
	EditorLayout *[]map[string]interface{} `json:"editorLayout,omitempty"`

	// GroupControls To be implemented
	GroupControls *[]map[string]interface{}     `json:"groupControls,omitempty"`
	Sidebar       *[]EditorInterfaceSidebarItem `json:"sidebar,omitempty"`
	Sys           SystemPropertiesEntry         `json:"sys"`
}

// EditorInterfaceControl defines model for EditorInterfaceControl.
type EditorInterfaceControl struct {
	// Disabled Whether the field is disabled
	Disabled *bool `json:"disabled,omitempty"`

	// FieldId ID of the field this control is for
	FieldId string `json:"fieldId"`

	// Settings Widget-specific settings (optional)
	Settings *EditorInterfaceSettings `json:"settings,omitempty"`

	// WidgetId ID of the widget to use for this field (optional)
	WidgetId *string `json:"widgetId,omitempty"`

	// WidgetNamespace Namespace of the widget (optional)
	WidgetNamespace *EditorInterfaceControlWidgetNamespace `json:"widgetNamespace,omitempty"`
}

// EditorInterfaceControlWidgetNamespace Namespace of the widget (optional)
type EditorInterfaceControlWidgetNamespace string

// EditorInterfaceSettings Widget-specific settings (optional)
type EditorInterfaceSettings struct {
	// Ampm Whether to use 12-hour time in the 'date' widget
	Ampm *string `json:"ampm,omitempty"`

	// BulkEditing Whether bulk editing is enabled for the field (reference fields only)
	BulkEditing *bool `json:"bulkEditing,omitempty"`

	// FalseLabel Label for the 'boolean' widget when false
	FalseLabel *string `json:"falseLabel,omitempty"`

	// Format Date format for the 'date' widget
	Format   *string `json:"format,omitempty"`
	HelpText *string `json:"helpText,omitempty"`

	// Stars Number of stars to show in the 'rating' widget
	Stars *string `json:"stars,omitempty"`

	// TrackingFieldId ID of the field to track when field is slug
	TrackingFieldId *string `json:"trackingFieldId,omitempty"`

	// TrueLabel Label for the 'boolean' widget when true
	TrueLabel            *string                `json:"trueLabel,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EditorInterfaceSidebarItem defines model for EditorInterfaceSidebarItem.
type EditorInterfaceSidebarItem struct {
	// Disabled Whether the field is disabled
	Disabled *bool `json:"disabled,omitempty"`

	// Settings Widget-specific settings (optional)
	Settings *EditorInterfaceSettings `json:"settings,omitempty"`

	// WidgetId ID of the widget to use for this field (optional)
	WidgetId *string `json:"widgetId,omitempty"`

	// WidgetNamespace Namespace of the widget (optional)
	WidgetNamespace *EditorInterfaceSidebarItemWidgetNamespace `json:"widgetNamespace,omitempty"`
}

// EditorInterfaceSidebarItemWidgetNamespace Namespace of the widget (optional)
type EditorInterfaceSidebarItemWidgetNamespace string

// EditorInterfaceUpdate defines model for EditorInterfaceUpdate.
type EditorInterfaceUpdate struct {
	// Controls Controls for each field in the content type
	Controls []EditorInterfaceControl `json:"controls"`

	// EditorLayout To be implemented
	EditorLayout *[]map[string]interface{} `json:"editorLayout,omitempty"`

	// GroupControls To be implemented
	GroupControls *[]map[string]interface{}     `json:"groupControls,omitempty"`
	Sidebar       *[]EditorInterfaceSidebarItem `json:"sidebar,omitempty"`
}

// Entry defines model for Entry.
type Entry struct {
	// Fields Content fields with values by locale
	Fields orderedmap.OrderedMap `json:"fields"`
	Sys    SystemPropertiesEntry `json:"sys"`
}

// EntryCollection defines model for EntryCollection.
type EntryCollection struct {
	Items *[]Entry `json:"items,omitempty"`

	// Limit Maximum number of entries returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of entries skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *EntryCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of entries
	Total *int `json:"total,omitempty"`
}

// EntryCollectionSysType defines model for EntryCollection.Sys.Type.
type EntryCollectionSysType string

// EntryDraft defines model for EntryDraft.
type EntryDraft struct {
	// Fields Content fields with values by locale
	Fields *orderedmap.OrderedMap `json:"fields,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	// Name Name of the environment
	Name string                   `json:"name"`
	Sys  SystemPropertiesResource `json:"sys"`
}

// EnvironmentCollection defines model for EnvironmentCollection.
type EnvironmentCollection struct {
	Items *[]Environment `json:"items,omitempty"`

	// Limit Maximum number of environments returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of environments skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *EnvironmentCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of environments
	Total *int `json:"total,omitempty"`
}

// EnvironmentCollectionSysType defines model for EnvironmentCollection.Sys.Type.
type EnvironmentCollectionSysType string

// EnvironmentCreate defines model for EnvironmentCreate.
type EnvironmentCreate struct {
	// Name Name of the environment to create
	Name string `json:"name"`
}

// EnvironmentSystemProperties defines model for EnvironmentSystemProperties.
type EnvironmentSystemProperties struct {
	Sys *EnvironmentSystemPropertiesSys `json:"sys,omitempty"`
}

// EnvironmentSystemPropertiesSys defines model for EnvironmentSystemPropertiesSys.
type EnvironmentSystemPropertiesSys struct {
	// Id Environment ID
	Id       string                                 `json:"id"`
	LinkType EnvironmentSystemPropertiesSysLinkType `json:"linkType"`
	Type     EnvironmentSystemPropertiesSysType     `json:"type"`
}

// EnvironmentSystemPropertiesSysLinkType defines model for EnvironmentSystemPropertiesSys.LinkType.
type EnvironmentSystemPropertiesSysLinkType string

// EnvironmentSystemPropertiesSysType defines model for EnvironmentSystemPropertiesSys.Type.
type EnvironmentSystemPropertiesSysType string

// EnvironmentUpdate defines model for EnvironmentUpdate.
type EnvironmentUpdate struct {
	// Name Updated name for the environment
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Error message
	Message *string `json:"message,omitempty"`

	// RequestId Unique identifier for the request
	RequestId string               `json:"requestId"`
	Sys       SystemPropertiesBase `json:"sys"`
}

// Field defines model for Field.
type Field struct {
	// DefaultValue Default value for the field
	DefaultValue *map[string]interface{} `json:"defaultValue,omitempty"`

	// Disabled Whether the field is disabled
	Disabled *bool `json:"disabled,omitempty"`

	// Id ID of the field
	Id    string     `json:"id"`
	Items *FieldItem `json:"items,omitempty"`

	// LinkType For Link fields, defines what type of resource it links to
	LinkType *FieldLinkType `json:"linkType,omitempty"`

	// Localized Whether the field is localized
	Localized bool `json:"localized"`

	// Name Name of the field
	Name string `json:"name"`

	// Omitted Whether the field is omitted
	Omitted *bool `json:"omitted,omitempty"`

	// Required Whether the field is required
	Required bool `json:"required"`

	// Type Type of the field
	Type FieldType `json:"type"`

	// Validations Validations that can be applied to the field
	Validations *[]FieldValidation `json:"validations,omitempty"`
}

// FieldLinkType For Link fields, defines what type of resource it links to
type FieldLinkType string

// FieldType Type of the field
type FieldType string

// FieldItem defines model for FieldItem.
type FieldItem struct {
	union json.RawMessage
}

// FieldItemLink defines model for FieldItemLink.
type FieldItemLink struct {
	LinkType    FieldItemLinkLinkType `json:"linkType"`
	Type        FieldItemLinkType     `json:"type"`
	Validations *[]FieldValidation    `json:"validations,omitempty"`
}

// FieldItemLinkLinkType defines model for FieldItemLink.LinkType.
type FieldItemLinkLinkType string

// FieldItemLinkType defines model for FieldItemLink.Type.
type FieldItemLinkType string

// FieldItemSymbol defines model for FieldItemSymbol.
type FieldItemSymbol struct {
	Type        FieldItemSymbolType `json:"type"`
	Validations *[]FieldValidation  `json:"validations,omitempty"`
}

// FieldItemSymbolType defines model for FieldItemSymbol.Type.
type FieldItemSymbolType string

// FieldValidation Validations that can be applied to fields
type FieldValidation struct {
	AssetFileSize *RangeMinMax `json:"assetFileSize,omitempty"`
	AssetFileType *struct {
		// Excludes Array of disallowed MIME types
		Excludes *[]string `json:"excludes,omitempty"`

		// Includes Array of allowed MIME types
		Includes *[]string `json:"includes,omitempty"`
	} `json:"assetFileType,omitempty"`
	AssetImageDimensions *RangeImageDimensions `json:"assetImageDimensions,omitempty"`
	DateRange            *RangeDate            `json:"dateRange,omitempty"`

	// EnabledMarks Array of allowed marks
	EnabledMarks *[]string `json:"enabledMarks,omitempty"`

	// EnabledNodeTypes Array of allowed node types
	EnabledNodeTypes *[]string `json:"enabledNodeTypes,omitempty"`

	// In Array of allowed values
	In *[]string `json:"in,omitempty"`

	// LinkContentType Array of content type IDs that the link can point to
	LinkContentType *[]string `json:"linkContentType,omitempty"`

	// LinkMimetypeGroup Array of mime types that the link can point to
	LinkMimetypeGroup *[]string `json:"linkMimetypeGroup,omitempty"`

	// Message Custom error message
	Message *string               `json:"message,omitempty"`
	Range   *RangeMinMax          `json:"range,omitempty"`
	Regexp  *RegexValidationValue `json:"regexp,omitempty"`
	Size    *RangeMinMax          `json:"size,omitempty"`

	// Unique Whether the field value must be unique
	Unique *bool `json:"unique,omitempty"`
}

// Locale defines model for Locale.
type Locale struct {
	// Code Locale code (e.g., en-US, de-DE)
	Code string `json:"code"`

	// ContentDeliveryApi Whether this locale is available in the content delivery API
	ContentDeliveryApi bool `json:"contentDeliveryApi"`

	// ContentManagementApi Whether this locale is available in the content management API
	ContentManagementApi bool `json:"contentManagementApi"`

	// Default Whether this is the default locale
	Default *bool `json:"default,omitempty"`

	// FallbackCode Code of the locale to use as a fallback
	FallbackCode *string `json:"fallbackCode,omitempty"`

	// Name Human readable name of the locale
	Name string `json:"name"`

	// Optional Whether this locale is optional for content
	Optional bool                     `json:"optional"`
	Sys      SystemPropertiesResource `json:"sys"`
}

// LocaleCollection defines model for LocaleCollection.
type LocaleCollection struct {
	Items *[]Locale `json:"items,omitempty"`

	// Limit Maximum number of locales returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of locales skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *LocaleCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of locales
	Total *int `json:"total,omitempty"`
}

// LocaleCollectionSysType defines model for LocaleCollection.Sys.Type.
type LocaleCollectionSysType string

// LocaleCreate defines model for LocaleCreate.
type LocaleCreate struct {
	// Code Locale code (e.g., en-US, de-DE)
	Code string `json:"code"`

	// ContentDeliveryApi Whether this locale is available in the content delivery API
	ContentDeliveryApi *bool `json:"contentDeliveryApi,omitempty"`

	// ContentManagementApi Whether this locale is available in the content management API
	ContentManagementApi *bool `json:"contentManagementApi,omitempty"`

	// Default Whether this is the default locale
	Default *bool `json:"default,omitempty"`

	// FallbackCode Code of the locale to use as a fallback
	FallbackCode *string `json:"fallbackCode"`

	// Name Human readable name of the locale
	Name string `json:"name"`

	// Optional Whether this locale is optional for content
	Optional *bool `json:"optional,omitempty"`
}

// LocaleUpdate defines model for LocaleUpdate.
type LocaleUpdate struct {
	// Code Locale code (e.g., en-US, de-DE)
	Code string `json:"code"`

	// ContentDeliveryApi Whether this locale is available in the content delivery API
	ContentDeliveryApi *bool `json:"contentDeliveryApi,omitempty"`

	// ContentManagementApi Whether this locale is available in the content management API
	ContentManagementApi *bool `json:"contentManagementApi,omitempty"`

	// FallbackCode Code of the locale to use as a fallback
	FallbackCode *string `json:"fallbackCode"`

	// Name Human readable name of the locale
	Name string `json:"name"`

	// Optional Whether this locale is optional for content
	Optional *bool `json:"optional,omitempty"`
}

// PreviewApiKey defines model for PreviewApiKey.
type PreviewApiKey struct {
	// AccessToken The Preview API access token
	AccessToken string `json:"accessToken"`

	// Description Description of the preview API key
	Description string `json:"description"`

	// Environments List of environments this preview API key can access
	Environments []EnvironmentSystemProperties `json:"environments"`

	// Name Name of the preview API key
	Name string           `json:"name"`
	Sys  SystemProperties `json:"sys"`
}

// PreviewApiKeyCollection defines model for PreviewApiKeyCollection.
type PreviewApiKeyCollection struct {
	Items *[]PreviewApiKey `json:"items,omitempty"`

	// Limit Maximum number of preview API keys returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of preview API keys skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *PreviewApiKeyCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of preview API keys
	Total *int `json:"total,omitempty"`
}

// PreviewApiKeyCollectionSysType defines model for PreviewApiKeyCollection.Sys.Type.
type PreviewApiKeyCollectionSysType string

// PreviewConfiguration defines model for PreviewConfiguration.
type PreviewConfiguration struct {
	// ContentType Content type ID
	ContentType string `json:"contentType"`

	// Enabled Whether the content type is enabled
	Enabled bool  `json:"enabled"`
	Example *bool `json:"example,omitempty"`

	// Url URL for the preview env of the content type
	Url string `json:"url"`
}

// PreviewEnvironment defines model for PreviewEnvironment.
type PreviewEnvironment struct {
	// Configurations Configuration for the preview environment
	Configurations []PreviewConfiguration `json:"configurations"`

	// Description Description of the preview environment
	Description string `json:"description"`

	// Name Name of the preview environment
	Name string                             `json:"name"`
	Sys  SystemPropertiesPreviewEnvironment `json:"sys"`
}

// PreviewEnvironmentInput defines model for PreviewEnvironmentInput.
type PreviewEnvironmentInput struct {
	// Configurations Configuration for the preview environment
	Configurations []PreviewConfiguration `json:"configurations"`

	// Description Description of the preview environment
	Description string `json:"description"`

	// Name Name of the preview environment
	Name string `json:"name"`
}

// RangeDate defines model for RangeDate.
type RangeDate struct {
	// Max Maximum date
	Max *time.Time `json:"max,omitempty"`

	// Min Minimum date
	Min *time.Time `json:"min,omitempty"`
}

// RangeImageDimensions defines model for RangeImageDimensions.
type RangeImageDimensions struct {
	Height *RangeMinMaxInteger `json:"height,omitempty"`
	Width  *RangeMinMaxInteger `json:"width,omitempty"`
}

// RangeMinMax defines model for RangeMinMax.
type RangeMinMax struct {
	// Max Maximum size
	Max *float64 `json:"max,omitempty"`

	// Min Minimum size
	Min *float64 `json:"min,omitempty"`
}

// RangeMinMaxInteger defines model for RangeMinMaxInteger.
type RangeMinMaxInteger struct {
	// Max Maximum size
	Max *float64 `json:"max,omitempty"`

	// Min Minimum size
	Min *float64 `json:"min,omitempty"`
}

// RegexValidationValue defines model for RegexValidationValue.
type RegexValidationValue struct {
	// Flags Regular expression flags
	Flags *string `json:"flags,omitempty"`

	// Pattern Regular expression pattern
	Pattern string `json:"pattern"`
}

// Space defines model for Space.
type Space struct {
	// DefaultLocale Default locale of the space
	DefaultLocale *string `json:"defaultLocale,omitempty"`

	// Name Name of the space
	Name string                `json:"name"`
	Sys  SystemPropertiesSpace `json:"sys"`
}

// SpaceCollection defines model for SpaceCollection.
type SpaceCollection struct {
	Items *[]Space `json:"items,omitempty"`

	// Limit Maximum number of spaces returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of spaces skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *SpaceCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of spaces
	Total *int `json:"total,omitempty"`
}

// SpaceCollectionSysType defines model for SpaceCollection.Sys.Type.
type SpaceCollectionSysType string

// SpaceCreate defines model for SpaceCreate.
type SpaceCreate struct {
	// DefaultLocale Default locale for the space
	DefaultLocale *string `json:"defaultLocale,omitempty"`

	// Name Name of the space to create
	Name string `json:"name"`
}

// SpaceUpdate defines model for SpaceUpdate.
type SpaceUpdate struct {
	// Name Updated name for the space
	Name string `json:"name"`
}

// SystemProperties defines model for SystemProperties.
type SystemProperties struct {
	// ArchivedAt Archival timestamp
	ArchivedAt  *time.Time `json:"archivedAt,omitempty"`
	ContentType *struct {
		Sys *struct {
			// Id Content type ID
			Id       *string                                 `json:"id,omitempty"`
			LinkType *SystemPropertiesContentTypeSysLinkType `json:"linkType,omitempty"`
			Type     *SystemPropertiesContentTypeSysType     `json:"type,omitempty"`
		} `json:"sys,omitempty"`
	} `json:"contentType,omitempty"`

	// CreatedAt Creation timestamp
	CreatedAt   *time.Time                   `json:"createdAt,omitempty"`
	Environment *EnvironmentSystemProperties `json:"environment,omitempty"`

	// Id Resource ID
	Id *string `json:"id,omitempty"`

	// PublishedAt Publication timestamp
	PublishedAt *time.Time                   `json:"publishedAt,omitempty"`
	Space       *EnvironmentSystemProperties `json:"space,omitempty"`

	// Type Resource type
	Type *string `json:"type,omitempty"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Version Resource version
	Version *int64 `json:"version,omitempty"`
}

// SystemPropertiesContentTypeSysLinkType defines model for SystemProperties.ContentType.Sys.LinkType.
type SystemPropertiesContentTypeSysLinkType string

// SystemPropertiesContentTypeSysType defines model for SystemProperties.ContentType.Sys.Type.
type SystemPropertiesContentTypeSysType string

// SystemPropertiesAppDefinition defines model for SystemPropertiesAppDefinition.
type SystemPropertiesAppDefinition struct {
	AppDefinition struct {
		Sys SystemPropertiesLink `json:"sys"`
	} `json:"appDefinition"`

	// Id Resource ID
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`

	// Version Resource version
	Version int64 `json:"version"`
}

// SystemPropertiesBase defines model for SystemPropertiesBase.
type SystemPropertiesBase struct {
	// Id Resource ID
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`
}

// SystemPropertiesContent defines model for SystemPropertiesContent.
type SystemPropertiesContent struct {
	// ArchivedAt Archival timestamp
	ArchivedAt  *time.Time                 `json:"archivedAt,omitempty"`
	CreatedBy   SystemPropertiesReference  `json:"createdBy"`
	Environment *SystemPropertiesReference `json:"environment,omitempty"`

	// Id Resource ID
	Id string `json:"id"`

	// PublishedAt Publication timestamp
	PublishedAt *time.Time                `json:"publishedAt,omitempty"`
	Space       SystemPropertiesReference `json:"space"`

	// Type Resource type
	Type string `json:"type"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time                 `json:"updatedAt,omitempty"`
	UpdatedBy *SystemPropertiesReference `json:"updatedBy,omitempty"`

	// Version Resource version
	Version int64 `json:"version"`
}

// SystemPropertiesEntry defines model for SystemPropertiesEntry.
type SystemPropertiesEntry struct {
	// ArchivedAt Archival timestamp
	ArchivedAt  *time.Time                 `json:"archivedAt,omitempty"`
	ContentType SystemPropertiesReference  `json:"contentType"`
	CreatedBy   SystemPropertiesReference  `json:"createdBy"`
	Environment *SystemPropertiesReference `json:"environment,omitempty"`

	// Id Resource ID
	Id string `json:"id"`

	// PublishedAt Publication timestamp
	PublishedAt *time.Time                `json:"publishedAt,omitempty"`
	Space       SystemPropertiesReference `json:"space"`

	// Type Resource type
	Type string `json:"type"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time                 `json:"updatedAt,omitempty"`
	UpdatedBy *SystemPropertiesReference `json:"updatedBy,omitempty"`

	// Version Resource version
	Version int64 `json:"version"`
}

// SystemPropertiesLink defines model for SystemPropertiesLink.
type SystemPropertiesLink struct {
	// Id Resource ID
	Id string `json:"id"`

	// LinkType Link type
	LinkType string `json:"linkType"`

	// Type Resource type
	Type string `json:"type"`
}

// SystemPropertiesPreviewEnvironment defines model for SystemPropertiesPreviewEnvironment.
type SystemPropertiesPreviewEnvironment struct {
	// CreatedAt Creation timestamp
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Id Resource ID
	Id    string                                 `json:"id"`
	Space *SystemPropertiesReference             `json:"space,omitempty"`
	Type  SystemPropertiesPreviewEnvironmentType `json:"type"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// Version Resource version
	Version *int64 `json:"version,omitempty"`
}

// SystemPropertiesPreviewEnvironmentType defines model for SystemPropertiesPreviewEnvironment.Type.
type SystemPropertiesPreviewEnvironmentType string

// SystemPropertiesReference defines model for SystemPropertiesReference.
type SystemPropertiesReference struct {
	Sys SystemPropertiesLink `json:"sys"`
}

// SystemPropertiesResource defines model for SystemPropertiesResource.
type SystemPropertiesResource struct {
	CreatedBy   SystemPropertiesReference  `json:"createdBy"`
	Environment *SystemPropertiesReference `json:"environment,omitempty"`

	// Id Resource ID
	Id    string                    `json:"id"`
	Space SystemPropertiesReference `json:"space"`

	// Type Resource type
	Type string `json:"type"`

	// UpdatedAt Last update timestamp
	UpdatedAt *time.Time                 `json:"updatedAt,omitempty"`
	UpdatedBy *SystemPropertiesReference `json:"updatedBy,omitempty"`

	// Version Resource version
	Version int64 `json:"version"`
}

// SystemPropertiesSpace defines model for SystemPropertiesSpace.
type SystemPropertiesSpace struct {
	// Id Resource ID
	Id string `json:"id"`

	// Type Resource type
	Type string `json:"type"`

	// Version Resource version
	Version int64 `json:"version"`
}

// Webhook defines model for Webhook.
type Webhook struct {
	// Active Whether the webhook is active
	Active *bool `json:"active,omitempty"`

	// Filters Filters to apply to the webhook
	Filters *[]map[string]interface{} `json:"filters,omitempty"`

	// Headers HTTP headers to send with the webhook request
	Headers []WebhookHeader `json:"headers"`

	// HttpBasicPassword Password for HTTP basic authentication
	HttpBasicPassword *string `json:"httpBasicPassword,omitempty"`

	// HttpBasicUsername Username for HTTP basic authentication
	HttpBasicUsername *string `json:"httpBasicUsername,omitempty"`

	// Name Name of the webhook
	Name string            `json:"name"`
	Sys  *SystemProperties `json:"sys,omitempty"`

	// Topics Events that trigger the webhook
	Topics []string `json:"topics"`

	// Url URL to call when the webhook is triggered
	Url string `json:"url"`
}

// WebhookCollection defines model for WebhookCollection.
type WebhookCollection struct {
	Items *[]Webhook `json:"items,omitempty"`

	// Limit Maximum number of webhooks returned
	Limit *int `json:"limit,omitempty"`

	// Skip Number of webhooks skipped
	Skip *int `json:"skip,omitempty"`
	Sys  *struct {
		Type *WebhookCollectionSysType `json:"type,omitempty"`
	} `json:"sys,omitempty"`

	// Total Total number of webhooks
	Total *int `json:"total,omitempty"`
}

// WebhookCollectionSysType defines model for WebhookCollection.Sys.Type.
type WebhookCollectionSysType string

// WebhookCreate defines model for WebhookCreate.
type WebhookCreate struct {
	// Active Whether the webhook is active
	Active *bool `json:"active,omitempty"`

	// Filters Filters to apply to the webhook
	Filters *[]map[string]interface{} `json:"filters,omitempty"`

	// Headers HTTP headers to send with the webhook request
	Headers *[]WebhookHeader `json:"headers,omitempty"`

	// HttpBasicPassword Password for HTTP basic authentication
	HttpBasicPassword *string `json:"httpBasicPassword,omitempty"`

	// HttpBasicUsername Username for HTTP basic authentication
	HttpBasicUsername *string `json:"httpBasicUsername,omitempty"`

	// Name Name of the webhook
	Name string `json:"name"`

	// Topics Events that trigger the webhook
	Topics []string `json:"topics"`

	// Url URL to call when the webhook is triggered
	Url string `json:"url"`
}

// WebhookHeader defines model for WebhookHeader.
type WebhookHeader struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// WebhookUpdate defines model for WebhookUpdate.
type WebhookUpdate struct {
	// Active Whether the webhook is active
	Active *bool `json:"active,omitempty"`

	// Filters Filters to apply to the webhook
	Filters *[]map[string]interface{} `json:"filters,omitempty"`

	// Headers HTTP headers to send with the webhook request
	Headers *[]WebhookHeader `json:"headers,omitempty"`

	// HttpBasicPassword Password for HTTP basic authentication
	HttpBasicPassword *string `json:"httpBasicPassword,omitempty"`

	// HttpBasicUsername Username for HTTP basic authentication
	HttpBasicUsername *string `json:"httpBasicUsername,omitempty"`

	// Name Name of the webhook
	Name string `json:"name"`

	// Topics Events that trigger the webhook
	Topics []string `json:"topics"`

	// Url URL to call when the webhook is triggered
	Url string `json:"url"`
}

// ApiKeyId defines model for apiKeyId.
type ApiKeyId = string

// ContentTypeHeader defines model for contentTypeHeader.
type ContentTypeHeader = string

// ContentTypeId defines model for contentTypeId.
type ContentTypeId = string

// EntryId defines model for entryId.
type EntryId = string

// EnvironmentId defines model for environmentId.
type EnvironmentId = string

// Limit defines model for limit.
type Limit = int

// LocaleCode defines model for localeCode.
type LocaleCode = string

// LocaleId defines model for localeId.
type LocaleId = string

// OrganizationId defines model for organizationId.
type OrganizationId = string

// ResourceId defines model for resourceId.
type ResourceId = string

// ResourceVersion defines model for resourceVersion.
type ResourceVersion = int64

// Skip defines model for skip.
type Skip = int

// SpaceId defines model for spaceId.
type SpaceId = string

// WebhookId defines model for webhookId.
type WebhookId = string

// GetAllAppDefinitionsParams defines parameters for GetAllAppDefinitions.
type GetAllAppDefinitionsParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// DeleteAppDefinitionParams defines parameters for DeleteAppDefinition.
type DeleteAppDefinitionParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateAppDefinitionParams defines parameters for UpdateAppDefinition.
type UpdateAppDefinitionParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllSpacesParams defines parameters for GetAllSpaces.
type GetAllSpacesParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// CreateSpaceParams defines parameters for CreateSpace.
type CreateSpaceParams struct {
	// ContentType Contentful Management API version header
	ContentType ContentTypeHeader `json:"Content-Type"`
}

// DeleteSpaceParams defines parameters for DeleteSpace.
type DeleteSpaceParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateSpaceParams defines parameters for UpdateSpace.
type UpdateSpaceParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllApiKeysParams defines parameters for GetAllApiKeys.
type GetAllApiKeysParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// DeleteApiKeyParams defines parameters for DeleteApiKey.
type DeleteApiKeyParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateApiKeyParams defines parameters for UpdateApiKey.
type UpdateApiKeyParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllEnvironmentsParams defines parameters for GetAllEnvironments.
type GetAllEnvironmentsParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// DeleteEnvironmentParams defines parameters for DeleteEnvironment.
type DeleteEnvironmentParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateEnvironmentParams defines parameters for UpdateEnvironment.
type UpdateEnvironmentParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllAppInstallationsParams defines parameters for GetAllAppInstallations.
type GetAllAppInstallationsParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// DeleteAppInstallationParams defines parameters for DeleteAppInstallation.
type DeleteAppInstallationParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpsertAppInstallationParams defines parameters for UpsertAppInstallation.
type UpsertAppInstallationParams struct {
	XContentfulMarketplace *string `json:"X-Contentful-Marketplace,omitempty"`
}

// GetAllAssetsParams defines parameters for GetAllAssets.
type GetAllAssetsParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// DeleteAssetParams defines parameters for DeleteAsset.
type DeleteAssetParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateAssetParams defines parameters for UpdateAsset.
type UpdateAssetParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UnarchiveAssetParams defines parameters for UnarchiveAsset.
type UnarchiveAssetParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// ArchiveAssetParams defines parameters for ArchiveAsset.
type ArchiveAssetParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UnpublishAssetParams defines parameters for UnpublishAsset.
type UnpublishAssetParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// PublishAssetParams defines parameters for PublishAsset.
type PublishAssetParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllContentTypesParams defines parameters for GetAllContentTypes.
type GetAllContentTypesParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// DeleteContentTypeParams defines parameters for DeleteContentType.
type DeleteContentTypeParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateContentTypeParams defines parameters for UpdateContentType.
type UpdateContentTypeParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateEditorInterfaceParams defines parameters for UpdateEditorInterface.
type UpdateEditorInterfaceParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// DeactivateContentTypeParams defines parameters for DeactivateContentType.
type DeactivateContentTypeParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// ActivateContentTypeParams defines parameters for ActivateContentType.
type ActivateContentTypeParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllEntriesParams defines parameters for GetAllEntries.
type GetAllEntriesParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`

	// ContentType Filter by content type
	ContentType *string `form:"content_type,omitempty" json:"content_type,omitempty"`
}

// CreateEntryParams defines parameters for CreateEntry.
type CreateEntryParams struct {
	// XContentfulContentType Content type ID for the new entry
	XContentfulContentType string `json:"X-Contentful-Content-Type"`
}

// DeleteEntryParams defines parameters for DeleteEntry.
type DeleteEntryParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateEntryParams defines parameters for UpdateEntry.
type UpdateEntryParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`

	// XContentfulContentType Content type ID for the new entry
	XContentfulContentType string `json:"X-Contentful-Content-Type"`
}

// UnarchiveEntryParams defines parameters for UnarchiveEntry.
type UnarchiveEntryParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// ArchiveEntryParams defines parameters for ArchiveEntry.
type ArchiveEntryParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UnpublishEntryParams defines parameters for UnpublishEntry.
type UnpublishEntryParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// PublishEntryParams defines parameters for PublishEntry.
type PublishEntryParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllLocalesParams defines parameters for GetAllLocales.
type GetAllLocalesParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// UpdateLocaleParams defines parameters for UpdateLocale.
type UpdateLocaleParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllPreviewApiKeysParams defines parameters for GetAllPreviewApiKeys.
type GetAllPreviewApiKeysParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// DeletePreviewEnvironmentParams defines parameters for DeletePreviewEnvironment.
type DeletePreviewEnvironmentParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdatePreviewEnvironmentParams defines parameters for UpdatePreviewEnvironment.
type UpdatePreviewEnvironmentParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// GetAllWebhooksParams defines parameters for GetAllWebhooks.
type GetAllWebhooksParams struct {
	// Limit Maximum number of items to return
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Skip Number of items to skip
	Skip *Skip `form:"skip,omitempty" json:"skip,omitempty"`
}

// DeleteWebhookParams defines parameters for DeleteWebhook.
type DeleteWebhookParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// UpdateWebhookParams defines parameters for UpdateWebhook.
type UpdateWebhookParams struct {
	// XContentfulVersion The version of the locale to update.
	XContentfulVersion ResourceVersion `json:"X-Contentful-Version"`
}

// CreateAppDefinitionJSONRequestBody defines body for CreateAppDefinition for application/json ContentType.
type CreateAppDefinitionJSONRequestBody = AppDefinitionDraft

// UpdateAppDefinitionJSONRequestBody defines body for UpdateAppDefinition for application/json ContentType.
type UpdateAppDefinitionJSONRequestBody = AppDefinitionDraft

// CreateAppBundleJSONRequestBody defines body for CreateAppBundle for application/json ContentType.
type CreateAppBundleJSONRequestBody = AppBundleDraft

// CreateSpaceJSONRequestBody defines body for CreateSpace for application/json ContentType.
type CreateSpaceJSONRequestBody = SpaceCreate

// UpdateSpaceJSONRequestBody defines body for UpdateSpace for application/json ContentType.
type UpdateSpaceJSONRequestBody = SpaceUpdate

// CreateApiKeyJSONRequestBody defines body for CreateApiKey for application/json ContentType.
type CreateApiKeyJSONRequestBody = ApiKeyDraft

// UpdateApiKeyJSONRequestBody defines body for UpdateApiKey for application/json ContentType.
type UpdateApiKeyJSONRequestBody = ApiKeyDraft

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = EnvironmentCreate

// UpdateEnvironmentJSONRequestBody defines body for UpdateEnvironment for application/json ContentType.
type UpdateEnvironmentJSONRequestBody = EnvironmentUpdate

// UpsertAppInstallationJSONRequestBody defines body for UpsertAppInstallation for application/json ContentType.
type UpsertAppInstallationJSONRequestBody = AppInstallationUpsert

// CreateAssetJSONRequestBody defines body for CreateAsset for application/json ContentType.
type CreateAssetJSONRequestBody = AssetCreate

// UpdateAssetJSONRequestBody defines body for UpdateAsset for application/json ContentType.
type UpdateAssetJSONRequestBody = AssetCreate

// CreateContentTypeJSONRequestBody defines body for CreateContentType for application/json ContentType.
type CreateContentTypeJSONRequestBody = ContentTypeCreate

// UpdateContentTypeJSONRequestBody defines body for UpdateContentType for application/json ContentType.
type UpdateContentTypeJSONRequestBody = ContentTypeUpdate

// UpdateEditorInterfaceJSONRequestBody defines body for UpdateEditorInterface for application/json ContentType.
type UpdateEditorInterfaceJSONRequestBody = EditorInterfaceUpdate

// CreateEntryJSONRequestBody defines body for CreateEntry for application/json ContentType.
type CreateEntryJSONRequestBody = EntryDraft

// UpdateEntryJSONRequestBody defines body for UpdateEntry for application/json ContentType.
type UpdateEntryJSONRequestBody = EntryDraft

// CreateLocaleJSONRequestBody defines body for CreateLocale for application/json ContentType.
type CreateLocaleJSONRequestBody = LocaleCreate

// UpdateLocaleJSONRequestBody defines body for UpdateLocale for application/json ContentType.
type UpdateLocaleJSONRequestBody = LocaleUpdate

// CreatePreviewEnvironmentJSONRequestBody defines body for CreatePreviewEnvironment for application/json ContentType.
type CreatePreviewEnvironmentJSONRequestBody = PreviewEnvironmentInput

// UpdatePreviewEnvironmentJSONRequestBody defines body for UpdatePreviewEnvironment for application/json ContentType.
type UpdatePreviewEnvironmentJSONRequestBody = PreviewEnvironmentInput

// CreateWebhookJSONRequestBody defines body for CreateWebhook for application/json ContentType.
type CreateWebhookJSONRequestBody = WebhookCreate

// UpdateWebhookJSONRequestBody defines body for UpdateWebhook for application/json ContentType.
type UpdateWebhookJSONRequestBody = WebhookUpdate

// Getter for additional properties for EditorInterfaceSettings. Returns the specified
// element and whether it was found
func (a EditorInterfaceSettings) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EditorInterfaceSettings
func (a *EditorInterfaceSettings) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EditorInterfaceSettings to handle AdditionalProperties
func (a *EditorInterfaceSettings) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["ampm"]; found {
		err = json.Unmarshal(raw, &a.Ampm)
		if err != nil {
			return fmt.Errorf("error reading 'ampm': %w", err)
		}
		delete(object, "ampm")
	}

	if raw, found := object["bulkEditing"]; found {
		err = json.Unmarshal(raw, &a.BulkEditing)
		if err != nil {
			return fmt.Errorf("error reading 'bulkEditing': %w", err)
		}
		delete(object, "bulkEditing")
	}

	if raw, found := object["falseLabel"]; found {
		err = json.Unmarshal(raw, &a.FalseLabel)
		if err != nil {
			return fmt.Errorf("error reading 'falseLabel': %w", err)
		}
		delete(object, "falseLabel")
	}

	if raw, found := object["format"]; found {
		err = json.Unmarshal(raw, &a.Format)
		if err != nil {
			return fmt.Errorf("error reading 'format': %w", err)
		}
		delete(object, "format")
	}

	if raw, found := object["helpText"]; found {
		err = json.Unmarshal(raw, &a.HelpText)
		if err != nil {
			return fmt.Errorf("error reading 'helpText': %w", err)
		}
		delete(object, "helpText")
	}

	if raw, found := object["stars"]; found {
		err = json.Unmarshal(raw, &a.Stars)
		if err != nil {
			return fmt.Errorf("error reading 'stars': %w", err)
		}
		delete(object, "stars")
	}

	if raw, found := object["trackingFieldId"]; found {
		err = json.Unmarshal(raw, &a.TrackingFieldId)
		if err != nil {
			return fmt.Errorf("error reading 'trackingFieldId': %w", err)
		}
		delete(object, "trackingFieldId")
	}

	if raw, found := object["trueLabel"]; found {
		err = json.Unmarshal(raw, &a.TrueLabel)
		if err != nil {
			return fmt.Errorf("error reading 'trueLabel': %w", err)
		}
		delete(object, "trueLabel")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EditorInterfaceSettings to handle AdditionalProperties
func (a EditorInterfaceSettings) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Ampm != nil {
		object["ampm"], err = json.Marshal(a.Ampm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ampm': %w", err)
		}
	}

	if a.BulkEditing != nil {
		object["bulkEditing"], err = json.Marshal(a.BulkEditing)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'bulkEditing': %w", err)
		}
	}

	if a.FalseLabel != nil {
		object["falseLabel"], err = json.Marshal(a.FalseLabel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'falseLabel': %w", err)
		}
	}

	if a.Format != nil {
		object["format"], err = json.Marshal(a.Format)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'format': %w", err)
		}
	}

	if a.HelpText != nil {
		object["helpText"], err = json.Marshal(a.HelpText)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'helpText': %w", err)
		}
	}

	if a.Stars != nil {
		object["stars"], err = json.Marshal(a.Stars)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'stars': %w", err)
		}
	}

	if a.TrackingFieldId != nil {
		object["trackingFieldId"], err = json.Marshal(a.TrackingFieldId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trackingFieldId': %w", err)
		}
	}

	if a.TrueLabel != nil {
		object["trueLabel"], err = json.Marshal(a.TrueLabel)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trueLabel': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsFieldItemSymbol returns the union data inside the FieldItem as a FieldItemSymbol
func (t FieldItem) AsFieldItemSymbol() (FieldItemSymbol, error) {
	var body FieldItemSymbol
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFieldItemSymbol overwrites any union data inside the FieldItem as the provided FieldItemSymbol
func (t *FieldItem) FromFieldItemSymbol(v FieldItemSymbol) error {
	v.Type = "Symbol"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFieldItemSymbol performs a merge with any union data inside the FieldItem, using the provided FieldItemSymbol
func (t *FieldItem) MergeFieldItemSymbol(v FieldItemSymbol) error {
	v.Type = "Symbol"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFieldItemLink returns the union data inside the FieldItem as a FieldItemLink
func (t FieldItem) AsFieldItemLink() (FieldItemLink, error) {
	var body FieldItemLink
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFieldItemLink overwrites any union data inside the FieldItem as the provided FieldItemLink
func (t *FieldItem) FromFieldItemLink(v FieldItemLink) error {
	v.Type = "Link"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFieldItemLink performs a merge with any union data inside the FieldItem, using the provided FieldItemLink
func (t *FieldItem) MergeFieldItemLink(v FieldItemLink) error {
	v.Type = "Link"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FieldItem) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t FieldItem) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "Link":
		return t.AsFieldItemLink()
	case "Symbol":
		return t.AsFieldItemSymbol()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t FieldItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FieldItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllAppDefinitions request
	GetAllAppDefinitions(ctx context.Context, organizationId OrganizationId, params *GetAllAppDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAppDefinitionWithBody request with any body
	CreateAppDefinitionWithBody(ctx context.Context, organizationId OrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAppDefinition(ctx context.Context, organizationId OrganizationId, body CreateAppDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAppDefinition request
	DeleteAppDefinition(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *DeleteAppDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppDefinition request
	GetAppDefinition(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAppDefinitionWithBody request with any body
	UpdateAppDefinitionWithBody(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAppDefinition(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, body UpdateAppDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAppBundleWithBody request with any body
	CreateAppBundleWithBody(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAppBundle(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, body CreateAppBundleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadAppWithBody request with any body
	UploadAppWithBody(ctx context.Context, organizationId OrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllSpaces request
	GetAllSpaces(ctx context.Context, params *GetAllSpacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSpaceWithBody request with any body
	CreateSpaceWithBody(ctx context.Context, params *CreateSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSpace(ctx context.Context, params *CreateSpaceParams, body CreateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSpace request
	DeleteSpace(ctx context.Context, spaceId SpaceId, params *DeleteSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpace request
	GetSpace(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSpaceWithBody request with any body
	UpdateSpaceWithBody(ctx context.Context, spaceId SpaceId, params *UpdateSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSpace(ctx context.Context, spaceId SpaceId, params *UpdateSpaceParams, body UpdateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllApiKeys request
	GetAllApiKeys(ctx context.Context, spaceId SpaceId, params *GetAllApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApiKeyWithBody request with any body
	CreateApiKeyWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApiKey(ctx context.Context, spaceId SpaceId, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiKey request
	DeleteApiKey(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *DeleteApiKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiKey request
	GetApiKey(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApiKeyWithBody request with any body
	UpdateApiKeyWithBody(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApiKey(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEnvironments request
	GetAllEnvironments(ctx context.Context, spaceId SpaceId, params *GetAllEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentWithBody request with any body
	CreateEnvironmentWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, spaceId SpaceId, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironment request
	DeleteEnvironment(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *DeleteEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironment request
	GetEnvironment(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironmentWithBody request with any body
	UpdateEnvironmentWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnvironment(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAppInstallations request
	GetAllAppInstallations(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAppInstallationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAppInstallation request
	DeleteAppInstallation(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAppInstallationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppInstallation request
	GetAppInstallation(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertAppInstallationWithBody request with any body
	UpsertAppInstallationWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertAppInstallation(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, body UpsertAppInstallationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllAssets request
	GetAllAssets(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAssetWithBody request with any body
	CreateAssetWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAsset request
	DeleteAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAsset request
	GetAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAssetWithBody request with any body
	UpdateAssetWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnarchiveAsset request
	UnarchiveAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnarchiveAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveAsset request
	ArchiveAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *ArchiveAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProcessAsset request
	ProcessAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, localeCode LocaleCode, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnpublishAsset request
	UnpublishAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnpublishAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishAsset request
	PublishAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *PublishAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllContentTypes request
	GetAllContentTypes(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllContentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateContentTypeWithBody request with any body
	CreateContentTypeWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteContentType request
	DeleteContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeleteContentTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentType request
	GetContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateContentTypeWithBody request with any body
	UpdateContentTypeWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEditorInterface request
	GetEditorInterface(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEditorInterfaceWithBody request with any body
	UpdateEditorInterfaceWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEditorInterface(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, body UpdateEditorInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeactivateContentType request
	DeactivateContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeactivateContentTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateContentType request
	ActivateContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *ActivateContentTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllEntries request
	GetAllEntries(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEntryWithBody request with any body
	CreateEntryWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, body CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEntry request
	DeleteEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *DeleteEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntry request
	GetEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEntryWithBody request with any body
	UpdateEntryWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, body UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnarchiveEntry request
	UnarchiveEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnarchiveEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveEntry request
	ArchiveEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *ArchiveEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnpublishEntry request
	UnpublishEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnpublishEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishEntry request
	PublishEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *PublishEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllLocales request
	GetAllLocales(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllLocalesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateLocaleWithBody request with any body
	CreateLocaleWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateLocale(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocale request
	DeleteLocale(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocale request
	GetLocale(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateLocaleWithBody request with any body
	UpdateLocaleWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateLocale(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, body UpdateLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllPreviewApiKeys request
	GetAllPreviewApiKeys(ctx context.Context, spaceId SpaceId, params *GetAllPreviewApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewApiKey request
	GetPreviewApiKey(ctx context.Context, spaceId SpaceId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePreviewEnvironmentWithBody request with any body
	CreatePreviewEnvironmentWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePreviewEnvironment(ctx context.Context, spaceId SpaceId, body CreatePreviewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePreviewEnvironment request
	DeletePreviewEnvironment(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *DeletePreviewEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPreviewEnvironment request
	GetPreviewEnvironment(ctx context.Context, spaceId SpaceId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePreviewEnvironmentWithBody request with any body
	UpdatePreviewEnvironmentWithBody(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePreviewEnvironment(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, body UpdatePreviewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllWebhooks request
	GetAllWebhooks(ctx context.Context, spaceId SpaceId, params *GetAllWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhookWithBody request with any body
	CreateWebhookWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWebhook(ctx context.Context, spaceId SpaceId, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWebhook request
	DeleteWebhook(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhook request
	GetWebhook(ctx context.Context, spaceId SpaceId, webhookId WebhookId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWebhookWithBody request with any body
	UpdateWebhookWithBody(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWebhook(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllAppDefinitions(ctx context.Context, organizationId OrganizationId, params *GetAllAppDefinitionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAppDefinitionsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppDefinitionWithBody(ctx context.Context, organizationId OrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppDefinitionRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppDefinition(ctx context.Context, organizationId OrganizationId, body CreateAppDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppDefinitionRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAppDefinition(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *DeleteAppDefinitionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppDefinitionRequest(c.Server, organizationId, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppDefinition(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppDefinitionRequest(c.Server, organizationId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppDefinitionWithBody(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppDefinitionRequestWithBody(c.Server, organizationId, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppDefinition(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, body UpdateAppDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppDefinitionRequest(c.Server, organizationId, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppBundleWithBody(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppBundleRequestWithBody(c.Server, organizationId, resourceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAppBundle(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, body CreateAppBundleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAppBundleRequest(c.Server, organizationId, resourceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadAppWithBody(ctx context.Context, organizationId OrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadAppRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllSpaces(ctx context.Context, params *GetAllSpacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllSpacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpaceWithBody(ctx context.Context, params *CreateSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpaceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpace(ctx context.Context, params *CreateSpaceParams, body CreateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpaceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSpace(ctx context.Context, spaceId SpaceId, params *DeleteSpaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSpaceRequest(c.Server, spaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpace(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpaceRequest(c.Server, spaceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSpaceWithBody(ctx context.Context, spaceId SpaceId, params *UpdateSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSpaceRequestWithBody(c.Server, spaceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSpace(ctx context.Context, spaceId SpaceId, params *UpdateSpaceParams, body UpdateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSpaceRequest(c.Server, spaceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllApiKeys(ctx context.Context, spaceId SpaceId, params *GetAllApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllApiKeysRequest(c.Server, spaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKeyWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyRequestWithBody(c.Server, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApiKey(ctx context.Context, spaceId SpaceId, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApiKeyRequest(c.Server, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiKey(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *DeleteApiKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiKeyRequest(c.Server, spaceId, apiKeyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiKey(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiKeyRequest(c.Server, spaceId, apiKeyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiKeyWithBody(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiKeyRequestWithBody(c.Server, spaceId, apiKeyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApiKey(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApiKeyRequest(c.Server, spaceId, apiKeyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEnvironments(ctx context.Context, spaceId SpaceId, params *GetAllEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEnvironmentsRequest(c.Server, spaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, spaceId SpaceId, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironment(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *DeleteEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentRequest(c.Server, spaceId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironment(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentRequest(c.Server, spaceId, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, spaceId, environmentId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironment(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequest(c.Server, spaceId, environmentId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAppInstallations(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAppInstallationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAppInstallationsRequest(c.Server, spaceId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAppInstallation(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAppInstallationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppInstallationRequest(c.Server, spaceId, environmentId, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppInstallation(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppInstallationRequest(c.Server, spaceId, environmentId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertAppInstallationWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertAppInstallationRequestWithBody(c.Server, spaceId, environmentId, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertAppInstallation(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, body UpsertAppInstallationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertAppInstallationRequest(c.Server, spaceId, environmentId, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllAssets(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAssetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAssetsRequest(c.Server, spaceId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAssetWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssetRequestWithBody(c.Server, spaceId, environmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAssetRequest(c.Server, spaceId, environmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAssetRequest(c.Server, spaceId, environmentId, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAssetRequest(c.Server, spaceId, environmentId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAssetWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetRequestWithBody(c.Server, spaceId, environmentId, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAssetRequest(c.Server, spaceId, environmentId, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnarchiveAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnarchiveAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnarchiveAssetRequest(c.Server, spaceId, environmentId, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *ArchiveAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveAssetRequest(c.Server, spaceId, environmentId, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProcessAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, localeCode LocaleCode, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProcessAssetRequest(c.Server, spaceId, environmentId, resourceId, localeCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnpublishAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnpublishAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishAssetRequest(c.Server, spaceId, environmentId, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishAsset(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *PublishAssetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishAssetRequest(c.Server, spaceId, environmentId, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllContentTypes(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllContentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllContentTypesRequest(c.Server, spaceId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContentTypeWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContentTypeRequestWithBody(c.Server, spaceId, environmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateContentTypeRequest(c.Server, spaceId, environmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeleteContentTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteContentTypeRequest(c.Server, spaceId, environmentId, contentTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentTypeRequest(c.Server, spaceId, environmentId, contentTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContentTypeWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContentTypeRequestWithBody(c.Server, spaceId, environmentId, contentTypeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateContentTypeRequest(c.Server, spaceId, environmentId, contentTypeId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEditorInterface(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEditorInterfaceRequest(c.Server, spaceId, environmentId, contentTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEditorInterfaceWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEditorInterfaceRequestWithBody(c.Server, spaceId, environmentId, contentTypeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEditorInterface(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, body UpdateEditorInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEditorInterfaceRequest(c.Server, spaceId, environmentId, contentTypeId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeactivateContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeactivateContentTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeactivateContentTypeRequest(c.Server, spaceId, environmentId, contentTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateContentType(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *ActivateContentTypeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateContentTypeRequest(c.Server, spaceId, environmentId, contentTypeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllEntries(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllEntriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllEntriesRequest(c.Server, spaceId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEntryWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEntryRequestWithBody(c.Server, spaceId, environmentId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, body CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEntryRequest(c.Server, spaceId, environmentId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *DeleteEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEntryRequest(c.Server, spaceId, environmentId, entryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntryRequest(c.Server, spaceId, environmentId, entryId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEntryWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEntryRequestWithBody(c.Server, spaceId, environmentId, entryId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, body UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEntryRequest(c.Server, spaceId, environmentId, entryId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnarchiveEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnarchiveEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnarchiveEntryRequest(c.Server, spaceId, environmentId, entryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *ArchiveEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveEntryRequest(c.Server, spaceId, environmentId, entryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnpublishEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnpublishEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnpublishEntryRequest(c.Server, spaceId, environmentId, entryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishEntry(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *PublishEntryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishEntryRequest(c.Server, spaceId, environmentId, entryId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllLocales(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllLocalesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllLocalesRequest(c.Server, spaceId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLocaleWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLocaleRequestWithBody(c.Server, spaceId, environmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateLocale(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateLocaleRequest(c.Server, spaceId, environmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocale(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocaleRequest(c.Server, spaceId, environmentId, localeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocale(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocaleRequest(c.Server, spaceId, environmentId, localeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocaleWithBody(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocaleRequestWithBody(c.Server, spaceId, environmentId, localeId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateLocale(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, body UpdateLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateLocaleRequest(c.Server, spaceId, environmentId, localeId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllPreviewApiKeys(ctx context.Context, spaceId SpaceId, params *GetAllPreviewApiKeysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllPreviewApiKeysRequest(c.Server, spaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewApiKey(ctx context.Context, spaceId SpaceId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewApiKeyRequest(c.Server, spaceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePreviewEnvironmentWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePreviewEnvironmentRequestWithBody(c.Server, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePreviewEnvironment(ctx context.Context, spaceId SpaceId, body CreatePreviewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePreviewEnvironmentRequest(c.Server, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePreviewEnvironment(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *DeletePreviewEnvironmentParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePreviewEnvironmentRequest(c.Server, spaceId, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPreviewEnvironment(ctx context.Context, spaceId SpaceId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPreviewEnvironmentRequest(c.Server, spaceId, resourceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePreviewEnvironmentWithBody(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePreviewEnvironmentRequestWithBody(c.Server, spaceId, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePreviewEnvironment(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, body UpdatePreviewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePreviewEnvironmentRequest(c.Server, spaceId, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllWebhooks(ctx context.Context, spaceId SpaceId, params *GetAllWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllWebhooksRequest(c.Server, spaceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookWithBody(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookRequestWithBody(c.Server, spaceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhook(ctx context.Context, spaceId SpaceId, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookRequest(c.Server, spaceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhook(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWebhookRequest(c.Server, spaceId, webhookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhook(ctx context.Context, spaceId SpaceId, webhookId WebhookId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookRequest(c.Server, spaceId, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhookWithBody(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhookRequestWithBody(c.Server, spaceId, webhookId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWebhook(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWebhookRequest(c.Server, spaceId, webhookId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllAppDefinitionsRequest generates requests for GetAllAppDefinitions
func NewGetAllAppDefinitionsRequest(server string, organizationId OrganizationId, params *GetAllAppDefinitionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/app_definitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAppDefinitionRequest calls the generic CreateAppDefinition builder with application/json body
func NewCreateAppDefinitionRequest(server string, organizationId OrganizationId, body CreateAppDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAppDefinitionRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateAppDefinitionRequestWithBody generates requests for CreateAppDefinition with any type of body
func NewCreateAppDefinitionRequestWithBody(server string, organizationId OrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/app_definitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAppDefinitionRequest generates requests for DeleteAppDefinition
func NewDeleteAppDefinitionRequest(server string, organizationId OrganizationId, resourceId ResourceId, params *DeleteAppDefinitionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/app_definitions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAppDefinitionRequest generates requests for GetAppDefinition
func NewGetAppDefinitionRequest(server string, organizationId OrganizationId, resourceId ResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/app_definitions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAppDefinitionRequest calls the generic UpdateAppDefinition builder with application/json body
func NewUpdateAppDefinitionRequest(server string, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, body UpdateAppDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAppDefinitionRequestWithBody(server, organizationId, resourceId, params, "application/json", bodyReader)
}

// NewUpdateAppDefinitionRequestWithBody generates requests for UpdateAppDefinition with any type of body
func NewUpdateAppDefinitionRequestWithBody(server string, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/app_definitions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewCreateAppBundleRequest calls the generic CreateAppBundle builder with application/json body
func NewCreateAppBundleRequest(server string, organizationId OrganizationId, resourceId ResourceId, body CreateAppBundleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAppBundleRequestWithBody(server, organizationId, resourceId, "application/json", bodyReader)
}

// NewCreateAppBundleRequestWithBody generates requests for CreateAppBundle with any type of body
func NewCreateAppBundleRequestWithBody(server string, organizationId OrganizationId, resourceId ResourceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/app_definitions/%s/app_bundles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadAppRequestWithBody generates requests for UploadApp with any type of body
func NewUploadAppRequestWithBody(server string, organizationId OrganizationId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/app_uploads", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllSpacesRequest generates requests for GetAllSpaces
func NewGetAllSpacesRequest(server string, params *GetAllSpacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSpaceRequest calls the generic CreateSpace builder with application/json body
func NewCreateSpaceRequest(server string, params *CreateSpaceParams, body CreateSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSpaceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateSpaceRequestWithBody generates requests for CreateSpace with any type of body
func NewCreateSpaceRequestWithBody(server string, params *CreateSpaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam0)

	}

	return req, nil
}

// NewDeleteSpaceRequest generates requests for DeleteSpace
func NewDeleteSpaceRequest(server string, spaceId SpaceId, params *DeleteSpaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetSpaceRequest generates requests for GetSpace
func NewGetSpaceRequest(server string, spaceId SpaceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSpaceRequest calls the generic UpdateSpace builder with application/json body
func NewUpdateSpaceRequest(server string, spaceId SpaceId, params *UpdateSpaceParams, body UpdateSpaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSpaceRequestWithBody(server, spaceId, params, "application/json", bodyReader)
}

// NewUpdateSpaceRequestWithBody generates requests for UpdateSpace with any type of body
func NewUpdateSpaceRequestWithBody(server string, spaceId SpaceId, params *UpdateSpaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAllApiKeysRequest generates requests for GetAllApiKeys
func NewGetAllApiKeysRequest(server string, spaceId SpaceId, params *GetAllApiKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/api_keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApiKeyRequest calls the generic CreateApiKey builder with application/json body
func NewCreateApiKeyRequest(server string, spaceId SpaceId, body CreateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApiKeyRequestWithBody(server, spaceId, "application/json", bodyReader)
}

// NewCreateApiKeyRequestWithBody generates requests for CreateApiKey with any type of body
func NewCreateApiKeyRequestWithBody(server string, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/api_keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiKeyRequest generates requests for DeleteApiKey
func NewDeleteApiKeyRequest(server string, spaceId SpaceId, apiKeyId ApiKeyId, params *DeleteApiKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/api_keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetApiKeyRequest generates requests for GetApiKey
func NewGetApiKeyRequest(server string, spaceId SpaceId, apiKeyId ApiKeyId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/api_keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApiKeyRequest calls the generic UpdateApiKey builder with application/json body
func NewUpdateApiKeyRequest(server string, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, body UpdateApiKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApiKeyRequestWithBody(server, spaceId, apiKeyId, params, "application/json", bodyReader)
}

// NewUpdateApiKeyRequestWithBody generates requests for UpdateApiKey with any type of body
func NewUpdateApiKeyRequestWithBody(server string, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "apiKeyId", runtime.ParamLocationPath, apiKeyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/api_keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAllEnvironmentsRequest generates requests for GetAllEnvironments
func NewGetAllEnvironmentsRequest(server string, spaceId SpaceId, params *GetAllEnvironmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, spaceId SpaceId, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, spaceId, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentRequest generates requests for DeleteEnvironment
func NewDeleteEnvironmentRequest(server string, spaceId SpaceId, environmentId EnvironmentId, params *DeleteEnvironmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetEnvironmentRequest generates requests for GetEnvironment
func NewGetEnvironmentRequest(server string, spaceId SpaceId, environmentId EnvironmentId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentRequest calls the generic UpdateEnvironment builder with application/json body
func NewUpdateEnvironmentRequest(server string, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnvironmentRequestWithBody(server, spaceId, environmentId, params, "application/json", bodyReader)
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAllAppInstallationsRequest generates requests for GetAllAppInstallations
func NewGetAllAppInstallationsRequest(server string, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAppInstallationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/app_installations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAppInstallationRequest generates requests for DeleteAppInstallation
func NewDeleteAppInstallationRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAppInstallationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/app_installations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAppInstallationRequest generates requests for GetAppInstallation
func NewGetAppInstallationRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/app_installations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpsertAppInstallationRequest calls the generic UpsertAppInstallation builder with application/json body
func NewUpsertAppInstallationRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, body UpsertAppInstallationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertAppInstallationRequestWithBody(server, spaceId, environmentId, resourceId, params, "application/json", bodyReader)
}

// NewUpsertAppInstallationRequestWithBody generates requests for UpsertAppInstallation with any type of body
func NewUpsertAppInstallationRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/app_installations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XContentfulMarketplace != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Marketplace", runtime.ParamLocationHeader, *params.XContentfulMarketplace)
			if err != nil {
				return nil, err
			}

			req.Header.Set("X-Contentful-Marketplace", headerParam0)
		}

	}

	return req, nil
}

// NewGetAllAssetsRequest generates requests for GetAllAssets
func NewGetAllAssetsRequest(server string, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAssetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAssetRequest calls the generic CreateAsset builder with application/json body
func NewCreateAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, body CreateAssetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAssetRequestWithBody(server, spaceId, environmentId, "application/json", bodyReader)
}

// NewCreateAssetRequestWithBody generates requests for CreateAsset with any type of body
func NewCreateAssetRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAssetRequest generates requests for DeleteAsset
func NewDeleteAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAssetRequest generates requests for GetAsset
func NewGetAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAssetRequest calls the generic UpdateAsset builder with application/json body
func NewUpdateAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, body UpdateAssetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAssetRequestWithBody(server, spaceId, environmentId, resourceId, params, "application/json", bodyReader)
}

// NewUpdateAssetRequestWithBody generates requests for UpdateAsset with any type of body
func NewUpdateAssetRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewUnarchiveAssetRequest generates requests for UnarchiveAsset
func NewUnarchiveAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnarchiveAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets/%s/archived", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewArchiveAssetRequest generates requests for ArchiveAsset
func NewArchiveAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *ArchiveAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets/%s/archived", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewProcessAssetRequest generates requests for ProcessAsset
func NewProcessAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, localeCode LocaleCode) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "localeCode", runtime.ParamLocationPath, localeCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets/%s/files/%s/process", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnpublishAssetRequest generates requests for UnpublishAsset
func NewUnpublishAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnpublishAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets/%s/published", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewPublishAssetRequest generates requests for PublishAsset
func NewPublishAssetRequest(server string, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *PublishAssetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/assets/%s/published", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAllContentTypesRequest generates requests for GetAllContentTypes
func NewGetAllContentTypesRequest(server string, spaceId SpaceId, environmentId EnvironmentId, params *GetAllContentTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateContentTypeRequest calls the generic CreateContentType builder with application/json body
func NewCreateContentTypeRequest(server string, spaceId SpaceId, environmentId EnvironmentId, body CreateContentTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateContentTypeRequestWithBody(server, spaceId, environmentId, "application/json", bodyReader)
}

// NewCreateContentTypeRequestWithBody generates requests for CreateContentType with any type of body
func NewCreateContentTypeRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteContentTypeRequest generates requests for DeleteContentType
func NewDeleteContentTypeRequest(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeleteContentTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentTypeId", runtime.ParamLocationPath, contentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetContentTypeRequest generates requests for GetContentType
func NewGetContentTypeRequest(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentTypeId", runtime.ParamLocationPath, contentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateContentTypeRequest calls the generic UpdateContentType builder with application/json body
func NewUpdateContentTypeRequest(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateContentTypeRequestWithBody(server, spaceId, environmentId, contentTypeId, params, "application/json", bodyReader)
}

// NewUpdateContentTypeRequestWithBody generates requests for UpdateContentType with any type of body
func NewUpdateContentTypeRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentTypeId", runtime.ParamLocationPath, contentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetEditorInterfaceRequest generates requests for GetEditorInterface
func NewGetEditorInterfaceRequest(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentTypeId", runtime.ParamLocationPath, contentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types/%s/editor_interface", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEditorInterfaceRequest calls the generic UpdateEditorInterface builder with application/json body
func NewUpdateEditorInterfaceRequest(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, body UpdateEditorInterfaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEditorInterfaceRequestWithBody(server, spaceId, environmentId, contentTypeId, params, "application/json", bodyReader)
}

// NewUpdateEditorInterfaceRequestWithBody generates requests for UpdateEditorInterface with any type of body
func NewUpdateEditorInterfaceRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentTypeId", runtime.ParamLocationPath, contentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types/%s/editor_interface", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewDeactivateContentTypeRequest generates requests for DeactivateContentType
func NewDeactivateContentTypeRequest(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeactivateContentTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentTypeId", runtime.ParamLocationPath, contentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types/%s/published", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewActivateContentTypeRequest generates requests for ActivateContentType
func NewActivateContentTypeRequest(server string, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *ActivateContentTypeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "contentTypeId", runtime.ParamLocationPath, contentTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/content_types/%s/published", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAllEntriesRequest generates requests for GetAllEntries
func NewGetAllEntriesRequest(server string, spaceId SpaceId, environmentId EnvironmentId, params *GetAllEntriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContentType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "content_type", runtime.ParamLocationQuery, *params.ContentType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEntryRequest calls the generic CreateEntry builder with application/json body
func NewCreateEntryRequest(server string, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, body CreateEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEntryRequestWithBody(server, spaceId, environmentId, params, "application/json", bodyReader)
}

// NewCreateEntryRequestWithBody generates requests for CreateEntry with any type of body
func NewCreateEntryRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Content-Type", runtime.ParamLocationHeader, params.XContentfulContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Content-Type", headerParam0)

	}

	return req, nil
}

// NewDeleteEntryRequest generates requests for DeleteEntry
func NewDeleteEntryRequest(server string, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *DeleteEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetEntryRequest generates requests for GetEntry
func NewGetEntryRequest(server string, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEntryRequest calls the generic UpdateEntry builder with application/json body
func NewUpdateEntryRequest(server string, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, body UpdateEntryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEntryRequestWithBody(server, spaceId, environmentId, entryId, params, "application/json", bodyReader)
}

// NewUpdateEntryRequestWithBody generates requests for UpdateEntry with any type of body
func NewUpdateEntryRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Content-Type", runtime.ParamLocationHeader, params.XContentfulContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Content-Type", headerParam1)

	}

	return req, nil
}

// NewUnarchiveEntryRequest generates requests for UnarchiveEntry
func NewUnarchiveEntryRequest(server string, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnarchiveEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries/%s/archived", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewArchiveEntryRequest generates requests for ArchiveEntry
func NewArchiveEntryRequest(server string, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *ArchiveEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries/%s/archived", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewUnpublishEntryRequest generates requests for UnpublishEntry
func NewUnpublishEntryRequest(server string, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnpublishEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries/%s/published", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewPublishEntryRequest generates requests for PublishEntry
func NewPublishEntryRequest(server string, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *PublishEntryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "entryId", runtime.ParamLocationPath, entryId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/entries/%s/published", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAllLocalesRequest generates requests for GetAllLocales
func NewGetAllLocalesRequest(server string, spaceId SpaceId, environmentId EnvironmentId, params *GetAllLocalesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/locales", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateLocaleRequest calls the generic CreateLocale builder with application/json body
func NewCreateLocaleRequest(server string, spaceId SpaceId, environmentId EnvironmentId, body CreateLocaleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateLocaleRequestWithBody(server, spaceId, environmentId, "application/json", bodyReader)
}

// NewCreateLocaleRequestWithBody generates requests for CreateLocale with any type of body
func NewCreateLocaleRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/locales", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocaleRequest generates requests for DeleteLocale
func NewDeleteLocaleRequest(server string, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "localeId", runtime.ParamLocationPath, localeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/locales/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocaleRequest generates requests for GetLocale
func NewGetLocaleRequest(server string, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "localeId", runtime.ParamLocationPath, localeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/locales/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateLocaleRequest calls the generic UpdateLocale builder with application/json body
func NewUpdateLocaleRequest(server string, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, body UpdateLocaleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateLocaleRequestWithBody(server, spaceId, environmentId, localeId, params, "application/json", bodyReader)
}

// NewUpdateLocaleRequestWithBody generates requests for UpdateLocale with any type of body
func NewUpdateLocaleRequestWithBody(server string, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "localeId", runtime.ParamLocationPath, localeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/environments/%s/locales/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAllPreviewApiKeysRequest generates requests for GetAllPreviewApiKeys
func NewGetAllPreviewApiKeysRequest(server string, spaceId SpaceId, params *GetAllPreviewApiKeysParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/preview_api_keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPreviewApiKeyRequest generates requests for GetPreviewApiKey
func NewGetPreviewApiKeyRequest(server string, spaceId SpaceId, resourceId ResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/preview_api_keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePreviewEnvironmentRequest calls the generic CreatePreviewEnvironment builder with application/json body
func NewCreatePreviewEnvironmentRequest(server string, spaceId SpaceId, body CreatePreviewEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePreviewEnvironmentRequestWithBody(server, spaceId, "application/json", bodyReader)
}

// NewCreatePreviewEnvironmentRequestWithBody generates requests for CreatePreviewEnvironment with any type of body
func NewCreatePreviewEnvironmentRequestWithBody(server string, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/preview_environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePreviewEnvironmentRequest generates requests for DeletePreviewEnvironment
func NewDeletePreviewEnvironmentRequest(server string, spaceId SpaceId, resourceId ResourceId, params *DeletePreviewEnvironmentParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/preview_environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetPreviewEnvironmentRequest generates requests for GetPreviewEnvironment
func NewGetPreviewEnvironmentRequest(server string, spaceId SpaceId, resourceId ResourceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/preview_environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePreviewEnvironmentRequest calls the generic UpdatePreviewEnvironment builder with application/json body
func NewUpdatePreviewEnvironmentRequest(server string, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, body UpdatePreviewEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePreviewEnvironmentRequestWithBody(server, spaceId, resourceId, params, "application/json", bodyReader)
}

// NewUpdatePreviewEnvironmentRequestWithBody generates requests for UpdatePreviewEnvironment with any type of body
func NewUpdatePreviewEnvironmentRequestWithBody(server string, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceId", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/preview_environments/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetAllWebhooksRequest generates requests for GetAllWebhooks
func NewGetAllWebhooksRequest(server string, spaceId SpaceId, params *GetAllWebhooksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/webhook_definitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhookRequest calls the generic CreateWebhook builder with application/json body
func NewCreateWebhookRequest(server string, spaceId SpaceId, body CreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookRequestWithBody(server, spaceId, "application/json", bodyReader)
}

// NewCreateWebhookRequestWithBody generates requests for CreateWebhook with any type of body
func NewCreateWebhookRequestWithBody(server string, spaceId SpaceId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/webhook_definitions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWebhookRequest generates requests for DeleteWebhook
func NewDeleteWebhookRequest(server string, spaceId SpaceId, webhookId WebhookId, params *DeleteWebhookParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/webhook_definitions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

// NewGetWebhookRequest generates requests for GetWebhook
func NewGetWebhookRequest(server string, spaceId SpaceId, webhookId WebhookId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/webhook_definitions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWebhookRequest calls the generic UpdateWebhook builder with application/json body
func NewUpdateWebhookRequest(server string, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, body UpdateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWebhookRequestWithBody(server, spaceId, webhookId, params, "application/json", bodyReader)
}

// NewUpdateWebhookRequestWithBody generates requests for UpdateWebhook with any type of body
func NewUpdateWebhookRequestWithBody(server string, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "spaceId", runtime.ParamLocationPath, spaceId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhookId", runtime.ParamLocationPath, webhookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/spaces/%s/webhook_definitions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Contentful-Version", runtime.ParamLocationHeader, params.XContentfulVersion)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Contentful-Version", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllAppDefinitionsWithResponse request
	GetAllAppDefinitionsWithResponse(ctx context.Context, organizationId OrganizationId, params *GetAllAppDefinitionsParams, reqEditors ...RequestEditorFn) (*GetAllAppDefinitionsResponse, error)

	// CreateAppDefinitionWithBodyWithResponse request with any body
	CreateAppDefinitionWithBodyWithResponse(ctx context.Context, organizationId OrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppDefinitionResponse, error)

	CreateAppDefinitionWithResponse(ctx context.Context, organizationId OrganizationId, body CreateAppDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppDefinitionResponse, error)

	// DeleteAppDefinitionWithResponse request
	DeleteAppDefinitionWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *DeleteAppDefinitionParams, reqEditors ...RequestEditorFn) (*DeleteAppDefinitionResponse, error)

	// GetAppDefinitionWithResponse request
	GetAppDefinitionWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetAppDefinitionResponse, error)

	// UpdateAppDefinitionWithBodyWithResponse request with any body
	UpdateAppDefinitionWithBodyWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppDefinitionResponse, error)

	UpdateAppDefinitionWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, body UpdateAppDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppDefinitionResponse, error)

	// CreateAppBundleWithBodyWithResponse request with any body
	CreateAppBundleWithBodyWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppBundleResponse, error)

	CreateAppBundleWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, body CreateAppBundleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppBundleResponse, error)

	// UploadAppWithBodyWithResponse request with any body
	UploadAppWithBodyWithResponse(ctx context.Context, organizationId OrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadAppResponse, error)

	// GetAllSpacesWithResponse request
	GetAllSpacesWithResponse(ctx context.Context, params *GetAllSpacesParams, reqEditors ...RequestEditorFn) (*GetAllSpacesResponse, error)

	// CreateSpaceWithBodyWithResponse request with any body
	CreateSpaceWithBodyWithResponse(ctx context.Context, params *CreateSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpaceResponse, error)

	CreateSpaceWithResponse(ctx context.Context, params *CreateSpaceParams, body CreateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpaceResponse, error)

	// DeleteSpaceWithResponse request
	DeleteSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *DeleteSpaceParams, reqEditors ...RequestEditorFn) (*DeleteSpaceResponse, error)

	// GetSpaceWithResponse request
	GetSpaceWithResponse(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*GetSpaceResponse, error)

	// UpdateSpaceWithBodyWithResponse request with any body
	UpdateSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, params *UpdateSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSpaceResponse, error)

	UpdateSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *UpdateSpaceParams, body UpdateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSpaceResponse, error)

	// GetAllApiKeysWithResponse request
	GetAllApiKeysWithResponse(ctx context.Context, spaceId SpaceId, params *GetAllApiKeysParams, reqEditors ...RequestEditorFn) (*GetAllApiKeysResponse, error)

	// CreateApiKeyWithBodyWithResponse request with any body
	CreateApiKeyWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error)

	CreateApiKeyWithResponse(ctx context.Context, spaceId SpaceId, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error)

	// DeleteApiKeyWithResponse request
	DeleteApiKeyWithResponse(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *DeleteApiKeyParams, reqEditors ...RequestEditorFn) (*DeleteApiKeyResponse, error)

	// GetApiKeyWithResponse request
	GetApiKeyWithResponse(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error)

	// UpdateApiKeyWithBodyWithResponse request with any body
	UpdateApiKeyWithBodyWithResponse(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error)

	UpdateApiKeyWithResponse(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error)

	// GetAllEnvironmentsWithResponse request
	GetAllEnvironmentsWithResponse(ctx context.Context, spaceId SpaceId, params *GetAllEnvironmentsParams, reqEditors ...RequestEditorFn) (*GetAllEnvironmentsResponse, error)

	// CreateEnvironmentWithBodyWithResponse request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironmentWithResponse request
	DeleteEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *DeleteEnvironmentParams, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error)

	// GetEnvironmentWithResponse request
	GetEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error)

	// UpdateEnvironmentWithBodyWithResponse request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	UpdateEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// GetAllAppInstallationsWithResponse request
	GetAllAppInstallationsWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAppInstallationsParams, reqEditors ...RequestEditorFn) (*GetAllAppInstallationsResponse, error)

	// DeleteAppInstallationWithResponse request
	DeleteAppInstallationWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAppInstallationParams, reqEditors ...RequestEditorFn) (*DeleteAppInstallationResponse, error)

	// GetAppInstallationWithResponse request
	GetAppInstallationWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetAppInstallationResponse, error)

	// UpsertAppInstallationWithBodyWithResponse request with any body
	UpsertAppInstallationWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertAppInstallationResponse, error)

	UpsertAppInstallationWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, body UpsertAppInstallationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertAppInstallationResponse, error)

	// GetAllAssetsWithResponse request
	GetAllAssetsWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAssetsParams, reqEditors ...RequestEditorFn) (*GetAllAssetsResponse, error)

	// CreateAssetWithBodyWithResponse request with any body
	CreateAssetWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssetResponse, error)

	CreateAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssetResponse, error)

	// DeleteAssetWithResponse request
	DeleteAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAssetParams, reqEditors ...RequestEditorFn) (*DeleteAssetResponse, error)

	// GetAssetWithResponse request
	GetAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetAssetResponse, error)

	// UpdateAssetWithBodyWithResponse request with any body
	UpdateAssetWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error)

	UpdateAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error)

	// UnarchiveAssetWithResponse request
	UnarchiveAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnarchiveAssetParams, reqEditors ...RequestEditorFn) (*UnarchiveAssetResponse, error)

	// ArchiveAssetWithResponse request
	ArchiveAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *ArchiveAssetParams, reqEditors ...RequestEditorFn) (*ArchiveAssetResponse, error)

	// ProcessAssetWithResponse request
	ProcessAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, localeCode LocaleCode, reqEditors ...RequestEditorFn) (*ProcessAssetResponse, error)

	// UnpublishAssetWithResponse request
	UnpublishAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnpublishAssetParams, reqEditors ...RequestEditorFn) (*UnpublishAssetResponse, error)

	// PublishAssetWithResponse request
	PublishAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *PublishAssetParams, reqEditors ...RequestEditorFn) (*PublishAssetResponse, error)

	// GetAllContentTypesWithResponse request
	GetAllContentTypesWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllContentTypesParams, reqEditors ...RequestEditorFn) (*GetAllContentTypesResponse, error)

	// CreateContentTypeWithBodyWithResponse request with any body
	CreateContentTypeWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContentTypeResponse, error)

	CreateContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContentTypeResponse, error)

	// DeleteContentTypeWithResponse request
	DeleteContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeleteContentTypeParams, reqEditors ...RequestEditorFn) (*DeleteContentTypeResponse, error)

	// GetContentTypeWithResponse request
	GetContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, reqEditors ...RequestEditorFn) (*GetContentTypeResponse, error)

	// UpdateContentTypeWithBodyWithResponse request with any body
	UpdateContentTypeWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContentTypeResponse, error)

	UpdateContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContentTypeResponse, error)

	// GetEditorInterfaceWithResponse request
	GetEditorInterfaceWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, reqEditors ...RequestEditorFn) (*GetEditorInterfaceResponse, error)

	// UpdateEditorInterfaceWithBodyWithResponse request with any body
	UpdateEditorInterfaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEditorInterfaceResponse, error)

	UpdateEditorInterfaceWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, body UpdateEditorInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEditorInterfaceResponse, error)

	// DeactivateContentTypeWithResponse request
	DeactivateContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeactivateContentTypeParams, reqEditors ...RequestEditorFn) (*DeactivateContentTypeResponse, error)

	// ActivateContentTypeWithResponse request
	ActivateContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *ActivateContentTypeParams, reqEditors ...RequestEditorFn) (*ActivateContentTypeResponse, error)

	// GetAllEntriesWithResponse request
	GetAllEntriesWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllEntriesParams, reqEditors ...RequestEditorFn) (*GetAllEntriesResponse, error)

	// CreateEntryWithBodyWithResponse request with any body
	CreateEntryWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEntryResponse, error)

	CreateEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, body CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEntryResponse, error)

	// DeleteEntryWithResponse request
	DeleteEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *DeleteEntryParams, reqEditors ...RequestEditorFn) (*DeleteEntryResponse, error)

	// GetEntryWithResponse request
	GetEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, reqEditors ...RequestEditorFn) (*GetEntryResponse, error)

	// UpdateEntryWithBodyWithResponse request with any body
	UpdateEntryWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEntryResponse, error)

	UpdateEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, body UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEntryResponse, error)

	// UnarchiveEntryWithResponse request
	UnarchiveEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnarchiveEntryParams, reqEditors ...RequestEditorFn) (*UnarchiveEntryResponse, error)

	// ArchiveEntryWithResponse request
	ArchiveEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *ArchiveEntryParams, reqEditors ...RequestEditorFn) (*ArchiveEntryResponse, error)

	// UnpublishEntryWithResponse request
	UnpublishEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnpublishEntryParams, reqEditors ...RequestEditorFn) (*UnpublishEntryResponse, error)

	// PublishEntryWithResponse request
	PublishEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *PublishEntryParams, reqEditors ...RequestEditorFn) (*PublishEntryResponse, error)

	// GetAllLocalesWithResponse request
	GetAllLocalesWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllLocalesParams, reqEditors ...RequestEditorFn) (*GetAllLocalesResponse, error)

	// CreateLocaleWithBodyWithResponse request with any body
	CreateLocaleWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLocaleResponse, error)

	CreateLocaleWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLocaleResponse, error)

	// DeleteLocaleWithResponse request
	DeleteLocaleWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, reqEditors ...RequestEditorFn) (*DeleteLocaleResponse, error)

	// GetLocaleWithResponse request
	GetLocaleWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, reqEditors ...RequestEditorFn) (*GetLocaleResponse, error)

	// UpdateLocaleWithBodyWithResponse request with any body
	UpdateLocaleWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocaleResponse, error)

	UpdateLocaleWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, body UpdateLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocaleResponse, error)

	// GetAllPreviewApiKeysWithResponse request
	GetAllPreviewApiKeysWithResponse(ctx context.Context, spaceId SpaceId, params *GetAllPreviewApiKeysParams, reqEditors ...RequestEditorFn) (*GetAllPreviewApiKeysResponse, error)

	// GetPreviewApiKeyWithResponse request
	GetPreviewApiKeyWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetPreviewApiKeyResponse, error)

	// CreatePreviewEnvironmentWithBodyWithResponse request with any body
	CreatePreviewEnvironmentWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePreviewEnvironmentResponse, error)

	CreatePreviewEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, body CreatePreviewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePreviewEnvironmentResponse, error)

	// DeletePreviewEnvironmentWithResponse request
	DeletePreviewEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *DeletePreviewEnvironmentParams, reqEditors ...RequestEditorFn) (*DeletePreviewEnvironmentResponse, error)

	// GetPreviewEnvironmentWithResponse request
	GetPreviewEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetPreviewEnvironmentResponse, error)

	// UpdatePreviewEnvironmentWithBodyWithResponse request with any body
	UpdatePreviewEnvironmentWithBodyWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePreviewEnvironmentResponse, error)

	UpdatePreviewEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, body UpdatePreviewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePreviewEnvironmentResponse, error)

	// GetAllWebhooksWithResponse request
	GetAllWebhooksWithResponse(ctx context.Context, spaceId SpaceId, params *GetAllWebhooksParams, reqEditors ...RequestEditorFn) (*GetAllWebhooksResponse, error)

	// CreateWebhookWithBodyWithResponse request with any body
	CreateWebhookWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error)

	CreateWebhookWithResponse(ctx context.Context, spaceId SpaceId, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error)

	// DeleteWebhookWithResponse request
	DeleteWebhookWithResponse(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*DeleteWebhookResponse, error)

	// GetWebhookWithResponse request
	GetWebhookWithResponse(ctx context.Context, spaceId SpaceId, webhookId WebhookId, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error)

	// UpdateWebhookWithBodyWithResponse request with any body
	UpdateWebhookWithBodyWithResponse(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhookResponse, error)

	UpdateWebhookWithResponse(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWebhookResponse, error)
}

type GetAllAppDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDefinitionCollection
}

// Status returns HTTPResponse.Status
func (r GetAllAppDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAppDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAppDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AppDefinition
}

// Status returns HTTPResponse.Status
func (r CreateAppDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAppDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDefinition
}

// Status returns HTTPResponse.Status
func (r GetAppDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAppDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppDefinition
}

// Status returns HTTPResponse.Status
func (r UpdateAppDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAppDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAppBundleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Sys SystemPropertiesBase `json:"sys"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateAppBundleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAppBundleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Sys SystemPropertiesBase `json:"sys"`
	}
}

// Status returns HTTPResponse.Status
func (r UploadAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpaceCollection
}

// Status returns HTTPResponse.Status
func (r GetAllSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSpaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Space
}

// Status returns HTTPResponse.Status
func (r CreateSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSpaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Space
}

// Status returns HTTPResponse.Status
func (r GetSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSpaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Space
}

// Status returns HTTPResponse.Status
func (r UpdateSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKeyCollection
}

// Status returns HTTPResponse.Status
func (r GetAllApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiKey
}

// Status returns HTTPResponse.Status
func (r CreateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKey
}

// Status returns HTTPResponse.Status
func (r GetApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiKey
}

// Status returns HTTPResponse.Status
func (r UpdateApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EnvironmentCollection
}

// Status returns HTTPResponse.Status
func (r GetAllEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Environment
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Environment
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAppInstallationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInstallationCollection
}

// Status returns HTTPResponse.Status
func (r GetAllAppInstallationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAppInstallationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppInstallationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAppInstallationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppInstallationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppInstallationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInstallation
}

// Status returns HTTPResponse.Status
func (r GetAppInstallationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppInstallationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertAppInstallationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppInstallation
	JSON201      *AppInstallation
}

// Status returns HTTPResponse.Status
func (r UpsertAppInstallationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertAppInstallationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllAssetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AssetCollection
}

// Status returns HTTPResponse.Status
func (r GetAllAssetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAssetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Asset
}

// Status returns HTTPResponse.Status
func (r CreateAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
}

// Status returns HTTPResponse.Status
func (r GetAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
	JSON201      *Asset
}

// Status returns HTTPResponse.Status
func (r UpdateAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnarchiveAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
}

// Status returns HTTPResponse.Status
func (r UnarchiveAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnarchiveAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
}

// Status returns HTTPResponse.Status
func (r ArchiveAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProcessAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ProcessAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProcessAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnpublishAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
}

// Status returns HTTPResponse.Status
func (r UnpublishAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnpublishAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishAssetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Asset
}

// Status returns HTTPResponse.Status
func (r PublishAssetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishAssetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllContentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentTypeCollection
}

// Status returns HTTPResponse.Status
func (r GetAllContentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllContentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateContentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ContentType
}

// Status returns HTTPResponse.Status
func (r CreateContentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateContentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteContentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteContentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteContentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentType
}

// Status returns HTTPResponse.Status
func (r GetContentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateContentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentType
	JSON201      *ContentType
}

// Status returns HTTPResponse.Status
func (r UpdateContentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateContentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEditorInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EditorInterface
}

// Status returns HTTPResponse.Status
func (r GetEditorInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEditorInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEditorInterfaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EditorInterface
}

// Status returns HTTPResponse.Status
func (r UpdateEditorInterfaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEditorInterfaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeactivateContentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentType
}

// Status returns HTTPResponse.Status
func (r DeactivateContentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeactivateContentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateContentTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentType
}

// Status returns HTTPResponse.Status
func (r ActivateContentTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateContentTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntryCollection
}

// Status returns HTTPResponse.Status
func (r GetAllEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Entry
}

// Status returns HTTPResponse.Status
func (r CreateEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
}

// Status returns HTTPResponse.Status
func (r GetEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
	JSON201      *Entry
}

// Status returns HTTPResponse.Status
func (r UpdateEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnarchiveEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
}

// Status returns HTTPResponse.Status
func (r UnarchiveEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnarchiveEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
}

// Status returns HTTPResponse.Status
func (r ArchiveEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnpublishEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
}

// Status returns HTTPResponse.Status
func (r UnpublishEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnpublishEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishEntryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
}

// Status returns HTTPResponse.Status
func (r PublishEntryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishEntryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllLocalesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocaleCollection
}

// Status returns HTTPResponse.Status
func (r GetAllLocalesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllLocalesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Locale
}

// Status returns HTTPResponse.Status
func (r CreateLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Locale
}

// Status returns HTTPResponse.Status
func (r GetLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Locale
}

// Status returns HTTPResponse.Status
func (r UpdateLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllPreviewApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreviewApiKeyCollection
}

// Status returns HTTPResponse.Status
func (r GetAllPreviewApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllPreviewApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewApiKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreviewApiKey
}

// Status returns HTTPResponse.Status
func (r GetPreviewApiKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewApiKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePreviewEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PreviewEnvironment
}

// Status returns HTTPResponse.Status
func (r CreatePreviewEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePreviewEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePreviewEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePreviewEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePreviewEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPreviewEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreviewEnvironment
}

// Status returns HTTPResponse.Status
func (r GetPreviewEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPreviewEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePreviewEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreviewEnvironment
}

// Status returns HTTPResponse.Status
func (r UpdatePreviewEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePreviewEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookCollection
}

// Status returns HTTPResponse.Status
func (r GetAllWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Webhook
}

// Status returns HTTPResponse.Status
func (r CreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Webhook
}

// Status returns HTTPResponse.Status
func (r GetWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Webhook
}

// Status returns HTTPResponse.Status
func (r UpdateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllAppDefinitionsWithResponse request returning *GetAllAppDefinitionsResponse
func (c *ClientWithResponses) GetAllAppDefinitionsWithResponse(ctx context.Context, organizationId OrganizationId, params *GetAllAppDefinitionsParams, reqEditors ...RequestEditorFn) (*GetAllAppDefinitionsResponse, error) {
	rsp, err := c.GetAllAppDefinitions(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAppDefinitionsResponse(rsp)
}

// CreateAppDefinitionWithBodyWithResponse request with arbitrary body returning *CreateAppDefinitionResponse
func (c *ClientWithResponses) CreateAppDefinitionWithBodyWithResponse(ctx context.Context, organizationId OrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppDefinitionResponse, error) {
	rsp, err := c.CreateAppDefinitionWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateAppDefinitionWithResponse(ctx context.Context, organizationId OrganizationId, body CreateAppDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppDefinitionResponse, error) {
	rsp, err := c.CreateAppDefinition(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppDefinitionResponse(rsp)
}

// DeleteAppDefinitionWithResponse request returning *DeleteAppDefinitionResponse
func (c *ClientWithResponses) DeleteAppDefinitionWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *DeleteAppDefinitionParams, reqEditors ...RequestEditorFn) (*DeleteAppDefinitionResponse, error) {
	rsp, err := c.DeleteAppDefinition(ctx, organizationId, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppDefinitionResponse(rsp)
}

// GetAppDefinitionWithResponse request returning *GetAppDefinitionResponse
func (c *ClientWithResponses) GetAppDefinitionWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetAppDefinitionResponse, error) {
	rsp, err := c.GetAppDefinition(ctx, organizationId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppDefinitionResponse(rsp)
}

// UpdateAppDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateAppDefinitionResponse
func (c *ClientWithResponses) UpdateAppDefinitionWithBodyWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppDefinitionResponse, error) {
	rsp, err := c.UpdateAppDefinitionWithBody(ctx, organizationId, resourceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateAppDefinitionWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, params *UpdateAppDefinitionParams, body UpdateAppDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppDefinitionResponse, error) {
	rsp, err := c.UpdateAppDefinition(ctx, organizationId, resourceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppDefinitionResponse(rsp)
}

// CreateAppBundleWithBodyWithResponse request with arbitrary body returning *CreateAppBundleResponse
func (c *ClientWithResponses) CreateAppBundleWithBodyWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAppBundleResponse, error) {
	rsp, err := c.CreateAppBundleWithBody(ctx, organizationId, resourceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppBundleResponse(rsp)
}

func (c *ClientWithResponses) CreateAppBundleWithResponse(ctx context.Context, organizationId OrganizationId, resourceId ResourceId, body CreateAppBundleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAppBundleResponse, error) {
	rsp, err := c.CreateAppBundle(ctx, organizationId, resourceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAppBundleResponse(rsp)
}

// UploadAppWithBodyWithResponse request with arbitrary body returning *UploadAppResponse
func (c *ClientWithResponses) UploadAppWithBodyWithResponse(ctx context.Context, organizationId OrganizationId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadAppResponse, error) {
	rsp, err := c.UploadAppWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadAppResponse(rsp)
}

// GetAllSpacesWithResponse request returning *GetAllSpacesResponse
func (c *ClientWithResponses) GetAllSpacesWithResponse(ctx context.Context, params *GetAllSpacesParams, reqEditors ...RequestEditorFn) (*GetAllSpacesResponse, error) {
	rsp, err := c.GetAllSpaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllSpacesResponse(rsp)
}

// CreateSpaceWithBodyWithResponse request with arbitrary body returning *CreateSpaceResponse
func (c *ClientWithResponses) CreateSpaceWithBodyWithResponse(ctx context.Context, params *CreateSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpaceResponse, error) {
	rsp, err := c.CreateSpaceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpaceResponse(rsp)
}

func (c *ClientWithResponses) CreateSpaceWithResponse(ctx context.Context, params *CreateSpaceParams, body CreateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpaceResponse, error) {
	rsp, err := c.CreateSpace(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSpaceResponse(rsp)
}

// DeleteSpaceWithResponse request returning *DeleteSpaceResponse
func (c *ClientWithResponses) DeleteSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *DeleteSpaceParams, reqEditors ...RequestEditorFn) (*DeleteSpaceResponse, error) {
	rsp, err := c.DeleteSpace(ctx, spaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSpaceResponse(rsp)
}

// GetSpaceWithResponse request returning *GetSpaceResponse
func (c *ClientWithResponses) GetSpaceWithResponse(ctx context.Context, spaceId SpaceId, reqEditors ...RequestEditorFn) (*GetSpaceResponse, error) {
	rsp, err := c.GetSpace(ctx, spaceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpaceResponse(rsp)
}

// UpdateSpaceWithBodyWithResponse request with arbitrary body returning *UpdateSpaceResponse
func (c *ClientWithResponses) UpdateSpaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, params *UpdateSpaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSpaceResponse, error) {
	rsp, err := c.UpdateSpaceWithBody(ctx, spaceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSpaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateSpaceWithResponse(ctx context.Context, spaceId SpaceId, params *UpdateSpaceParams, body UpdateSpaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSpaceResponse, error) {
	rsp, err := c.UpdateSpace(ctx, spaceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSpaceResponse(rsp)
}

// GetAllApiKeysWithResponse request returning *GetAllApiKeysResponse
func (c *ClientWithResponses) GetAllApiKeysWithResponse(ctx context.Context, spaceId SpaceId, params *GetAllApiKeysParams, reqEditors ...RequestEditorFn) (*GetAllApiKeysResponse, error) {
	rsp, err := c.GetAllApiKeys(ctx, spaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllApiKeysResponse(rsp)
}

// CreateApiKeyWithBodyWithResponse request with arbitrary body returning *CreateApiKeyResponse
func (c *ClientWithResponses) CreateApiKeyWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error) {
	rsp, err := c.CreateApiKeyWithBody(ctx, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) CreateApiKeyWithResponse(ctx context.Context, spaceId SpaceId, body CreateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApiKeyResponse, error) {
	rsp, err := c.CreateApiKey(ctx, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApiKeyResponse(rsp)
}

// DeleteApiKeyWithResponse request returning *DeleteApiKeyResponse
func (c *ClientWithResponses) DeleteApiKeyWithResponse(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *DeleteApiKeyParams, reqEditors ...RequestEditorFn) (*DeleteApiKeyResponse, error) {
	rsp, err := c.DeleteApiKey(ctx, spaceId, apiKeyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiKeyResponse(rsp)
}

// GetApiKeyWithResponse request returning *GetApiKeyResponse
func (c *ClientWithResponses) GetApiKeyWithResponse(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, reqEditors ...RequestEditorFn) (*GetApiKeyResponse, error) {
	rsp, err := c.GetApiKey(ctx, spaceId, apiKeyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiKeyResponse(rsp)
}

// UpdateApiKeyWithBodyWithResponse request with arbitrary body returning *UpdateApiKeyResponse
func (c *ClientWithResponses) UpdateApiKeyWithBodyWithResponse(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error) {
	rsp, err := c.UpdateApiKeyWithBody(ctx, spaceId, apiKeyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiKeyResponse(rsp)
}

func (c *ClientWithResponses) UpdateApiKeyWithResponse(ctx context.Context, spaceId SpaceId, apiKeyId ApiKeyId, params *UpdateApiKeyParams, body UpdateApiKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApiKeyResponse, error) {
	rsp, err := c.UpdateApiKey(ctx, spaceId, apiKeyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApiKeyResponse(rsp)
}

// GetAllEnvironmentsWithResponse request returning *GetAllEnvironmentsResponse
func (c *ClientWithResponses) GetAllEnvironmentsWithResponse(ctx context.Context, spaceId SpaceId, params *GetAllEnvironmentsParams, reqEditors ...RequestEditorFn) (*GetAllEnvironmentsResponse, error) {
	rsp, err := c.GetAllEnvironments(ctx, spaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentWithResponse request returning *DeleteEnvironmentResponse
func (c *ClientWithResponses) DeleteEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *DeleteEnvironmentParams, reqEditors ...RequestEditorFn) (*DeleteEnvironmentResponse, error) {
	rsp, err := c.DeleteEnvironment(ctx, spaceId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentResponse(rsp)
}

// GetEnvironmentWithResponse request returning *GetEnvironmentResponse
func (c *ClientWithResponses) GetEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, reqEditors ...RequestEditorFn) (*GetEnvironmentResponse, error) {
	rsp, err := c.GetEnvironment(ctx, spaceId, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, spaceId, environmentId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *UpdateEnvironmentParams, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironment(ctx, spaceId, environmentId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// GetAllAppInstallationsWithResponse request returning *GetAllAppInstallationsResponse
func (c *ClientWithResponses) GetAllAppInstallationsWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAppInstallationsParams, reqEditors ...RequestEditorFn) (*GetAllAppInstallationsResponse, error) {
	rsp, err := c.GetAllAppInstallations(ctx, spaceId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAppInstallationsResponse(rsp)
}

// DeleteAppInstallationWithResponse request returning *DeleteAppInstallationResponse
func (c *ClientWithResponses) DeleteAppInstallationWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAppInstallationParams, reqEditors ...RequestEditorFn) (*DeleteAppInstallationResponse, error) {
	rsp, err := c.DeleteAppInstallation(ctx, spaceId, environmentId, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppInstallationResponse(rsp)
}

// GetAppInstallationWithResponse request returning *GetAppInstallationResponse
func (c *ClientWithResponses) GetAppInstallationWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetAppInstallationResponse, error) {
	rsp, err := c.GetAppInstallation(ctx, spaceId, environmentId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppInstallationResponse(rsp)
}

// UpsertAppInstallationWithBodyWithResponse request with arbitrary body returning *UpsertAppInstallationResponse
func (c *ClientWithResponses) UpsertAppInstallationWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertAppInstallationResponse, error) {
	rsp, err := c.UpsertAppInstallationWithBody(ctx, spaceId, environmentId, resourceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertAppInstallationResponse(rsp)
}

func (c *ClientWithResponses) UpsertAppInstallationWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpsertAppInstallationParams, body UpsertAppInstallationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertAppInstallationResponse, error) {
	rsp, err := c.UpsertAppInstallation(ctx, spaceId, environmentId, resourceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertAppInstallationResponse(rsp)
}

// GetAllAssetsWithResponse request returning *GetAllAssetsResponse
func (c *ClientWithResponses) GetAllAssetsWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllAssetsParams, reqEditors ...RequestEditorFn) (*GetAllAssetsResponse, error) {
	rsp, err := c.GetAllAssets(ctx, spaceId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAssetsResponse(rsp)
}

// CreateAssetWithBodyWithResponse request with arbitrary body returning *CreateAssetResponse
func (c *ClientWithResponses) CreateAssetWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAssetResponse, error) {
	rsp, err := c.CreateAssetWithBody(ctx, spaceId, environmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssetResponse(rsp)
}

func (c *ClientWithResponses) CreateAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAssetResponse, error) {
	rsp, err := c.CreateAsset(ctx, spaceId, environmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAssetResponse(rsp)
}

// DeleteAssetWithResponse request returning *DeleteAssetResponse
func (c *ClientWithResponses) DeleteAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *DeleteAssetParams, reqEditors ...RequestEditorFn) (*DeleteAssetResponse, error) {
	rsp, err := c.DeleteAsset(ctx, spaceId, environmentId, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAssetResponse(rsp)
}

// GetAssetWithResponse request returning *GetAssetResponse
func (c *ClientWithResponses) GetAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetAssetResponse, error) {
	rsp, err := c.GetAsset(ctx, spaceId, environmentId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAssetResponse(rsp)
}

// UpdateAssetWithBodyWithResponse request with arbitrary body returning *UpdateAssetResponse
func (c *ClientWithResponses) UpdateAssetWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error) {
	rsp, err := c.UpdateAssetWithBody(ctx, spaceId, environmentId, resourceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetResponse(rsp)
}

func (c *ClientWithResponses) UpdateAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UpdateAssetParams, body UpdateAssetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAssetResponse, error) {
	rsp, err := c.UpdateAsset(ctx, spaceId, environmentId, resourceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAssetResponse(rsp)
}

// UnarchiveAssetWithResponse request returning *UnarchiveAssetResponse
func (c *ClientWithResponses) UnarchiveAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnarchiveAssetParams, reqEditors ...RequestEditorFn) (*UnarchiveAssetResponse, error) {
	rsp, err := c.UnarchiveAsset(ctx, spaceId, environmentId, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnarchiveAssetResponse(rsp)
}

// ArchiveAssetWithResponse request returning *ArchiveAssetResponse
func (c *ClientWithResponses) ArchiveAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *ArchiveAssetParams, reqEditors ...RequestEditorFn) (*ArchiveAssetResponse, error) {
	rsp, err := c.ArchiveAsset(ctx, spaceId, environmentId, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveAssetResponse(rsp)
}

// ProcessAssetWithResponse request returning *ProcessAssetResponse
func (c *ClientWithResponses) ProcessAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, localeCode LocaleCode, reqEditors ...RequestEditorFn) (*ProcessAssetResponse, error) {
	rsp, err := c.ProcessAsset(ctx, spaceId, environmentId, resourceId, localeCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProcessAssetResponse(rsp)
}

// UnpublishAssetWithResponse request returning *UnpublishAssetResponse
func (c *ClientWithResponses) UnpublishAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *UnpublishAssetParams, reqEditors ...RequestEditorFn) (*UnpublishAssetResponse, error) {
	rsp, err := c.UnpublishAsset(ctx, spaceId, environmentId, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishAssetResponse(rsp)
}

// PublishAssetWithResponse request returning *PublishAssetResponse
func (c *ClientWithResponses) PublishAssetWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, resourceId ResourceId, params *PublishAssetParams, reqEditors ...RequestEditorFn) (*PublishAssetResponse, error) {
	rsp, err := c.PublishAsset(ctx, spaceId, environmentId, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishAssetResponse(rsp)
}

// GetAllContentTypesWithResponse request returning *GetAllContentTypesResponse
func (c *ClientWithResponses) GetAllContentTypesWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllContentTypesParams, reqEditors ...RequestEditorFn) (*GetAllContentTypesResponse, error) {
	rsp, err := c.GetAllContentTypes(ctx, spaceId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllContentTypesResponse(rsp)
}

// CreateContentTypeWithBodyWithResponse request with arbitrary body returning *CreateContentTypeResponse
func (c *ClientWithResponses) CreateContentTypeWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateContentTypeResponse, error) {
	rsp, err := c.CreateContentTypeWithBody(ctx, spaceId, environmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContentTypeResponse(rsp)
}

func (c *ClientWithResponses) CreateContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateContentTypeResponse, error) {
	rsp, err := c.CreateContentType(ctx, spaceId, environmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateContentTypeResponse(rsp)
}

// DeleteContentTypeWithResponse request returning *DeleteContentTypeResponse
func (c *ClientWithResponses) DeleteContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeleteContentTypeParams, reqEditors ...RequestEditorFn) (*DeleteContentTypeResponse, error) {
	rsp, err := c.DeleteContentType(ctx, spaceId, environmentId, contentTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteContentTypeResponse(rsp)
}

// GetContentTypeWithResponse request returning *GetContentTypeResponse
func (c *ClientWithResponses) GetContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, reqEditors ...RequestEditorFn) (*GetContentTypeResponse, error) {
	rsp, err := c.GetContentType(ctx, spaceId, environmentId, contentTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentTypeResponse(rsp)
}

// UpdateContentTypeWithBodyWithResponse request with arbitrary body returning *UpdateContentTypeResponse
func (c *ClientWithResponses) UpdateContentTypeWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateContentTypeResponse, error) {
	rsp, err := c.UpdateContentTypeWithBody(ctx, spaceId, environmentId, contentTypeId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContentTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateContentTypeParams, body UpdateContentTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateContentTypeResponse, error) {
	rsp, err := c.UpdateContentType(ctx, spaceId, environmentId, contentTypeId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateContentTypeResponse(rsp)
}

// GetEditorInterfaceWithResponse request returning *GetEditorInterfaceResponse
func (c *ClientWithResponses) GetEditorInterfaceWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, reqEditors ...RequestEditorFn) (*GetEditorInterfaceResponse, error) {
	rsp, err := c.GetEditorInterface(ctx, spaceId, environmentId, contentTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEditorInterfaceResponse(rsp)
}

// UpdateEditorInterfaceWithBodyWithResponse request with arbitrary body returning *UpdateEditorInterfaceResponse
func (c *ClientWithResponses) UpdateEditorInterfaceWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEditorInterfaceResponse, error) {
	rsp, err := c.UpdateEditorInterfaceWithBody(ctx, spaceId, environmentId, contentTypeId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEditorInterfaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateEditorInterfaceWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *UpdateEditorInterfaceParams, body UpdateEditorInterfaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEditorInterfaceResponse, error) {
	rsp, err := c.UpdateEditorInterface(ctx, spaceId, environmentId, contentTypeId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEditorInterfaceResponse(rsp)
}

// DeactivateContentTypeWithResponse request returning *DeactivateContentTypeResponse
func (c *ClientWithResponses) DeactivateContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *DeactivateContentTypeParams, reqEditors ...RequestEditorFn) (*DeactivateContentTypeResponse, error) {
	rsp, err := c.DeactivateContentType(ctx, spaceId, environmentId, contentTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeactivateContentTypeResponse(rsp)
}

// ActivateContentTypeWithResponse request returning *ActivateContentTypeResponse
func (c *ClientWithResponses) ActivateContentTypeWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentTypeId ContentTypeId, params *ActivateContentTypeParams, reqEditors ...RequestEditorFn) (*ActivateContentTypeResponse, error) {
	rsp, err := c.ActivateContentType(ctx, spaceId, environmentId, contentTypeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateContentTypeResponse(rsp)
}

// GetAllEntriesWithResponse request returning *GetAllEntriesResponse
func (c *ClientWithResponses) GetAllEntriesWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllEntriesParams, reqEditors ...RequestEditorFn) (*GetAllEntriesResponse, error) {
	rsp, err := c.GetAllEntries(ctx, spaceId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllEntriesResponse(rsp)
}

// CreateEntryWithBodyWithResponse request with arbitrary body returning *CreateEntryResponse
func (c *ClientWithResponses) CreateEntryWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEntryResponse, error) {
	rsp, err := c.CreateEntryWithBody(ctx, spaceId, environmentId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEntryResponse(rsp)
}

func (c *ClientWithResponses) CreateEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *CreateEntryParams, body CreateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEntryResponse, error) {
	rsp, err := c.CreateEntry(ctx, spaceId, environmentId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEntryResponse(rsp)
}

// DeleteEntryWithResponse request returning *DeleteEntryResponse
func (c *ClientWithResponses) DeleteEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *DeleteEntryParams, reqEditors ...RequestEditorFn) (*DeleteEntryResponse, error) {
	rsp, err := c.DeleteEntry(ctx, spaceId, environmentId, entryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEntryResponse(rsp)
}

// GetEntryWithResponse request returning *GetEntryResponse
func (c *ClientWithResponses) GetEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, reqEditors ...RequestEditorFn) (*GetEntryResponse, error) {
	rsp, err := c.GetEntry(ctx, spaceId, environmentId, entryId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntryResponse(rsp)
}

// UpdateEntryWithBodyWithResponse request with arbitrary body returning *UpdateEntryResponse
func (c *ClientWithResponses) UpdateEntryWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEntryResponse, error) {
	rsp, err := c.UpdateEntryWithBody(ctx, spaceId, environmentId, entryId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEntryResponse(rsp)
}

func (c *ClientWithResponses) UpdateEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UpdateEntryParams, body UpdateEntryJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEntryResponse, error) {
	rsp, err := c.UpdateEntry(ctx, spaceId, environmentId, entryId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEntryResponse(rsp)
}

// UnarchiveEntryWithResponse request returning *UnarchiveEntryResponse
func (c *ClientWithResponses) UnarchiveEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnarchiveEntryParams, reqEditors ...RequestEditorFn) (*UnarchiveEntryResponse, error) {
	rsp, err := c.UnarchiveEntry(ctx, spaceId, environmentId, entryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnarchiveEntryResponse(rsp)
}

// ArchiveEntryWithResponse request returning *ArchiveEntryResponse
func (c *ClientWithResponses) ArchiveEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *ArchiveEntryParams, reqEditors ...RequestEditorFn) (*ArchiveEntryResponse, error) {
	rsp, err := c.ArchiveEntry(ctx, spaceId, environmentId, entryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveEntryResponse(rsp)
}

// UnpublishEntryWithResponse request returning *UnpublishEntryResponse
func (c *ClientWithResponses) UnpublishEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *UnpublishEntryParams, reqEditors ...RequestEditorFn) (*UnpublishEntryResponse, error) {
	rsp, err := c.UnpublishEntry(ctx, spaceId, environmentId, entryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnpublishEntryResponse(rsp)
}

// PublishEntryWithResponse request returning *PublishEntryResponse
func (c *ClientWithResponses) PublishEntryWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, entryId EntryId, params *PublishEntryParams, reqEditors ...RequestEditorFn) (*PublishEntryResponse, error) {
	rsp, err := c.PublishEntry(ctx, spaceId, environmentId, entryId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishEntryResponse(rsp)
}

// GetAllLocalesWithResponse request returning *GetAllLocalesResponse
func (c *ClientWithResponses) GetAllLocalesWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, params *GetAllLocalesParams, reqEditors ...RequestEditorFn) (*GetAllLocalesResponse, error) {
	rsp, err := c.GetAllLocales(ctx, spaceId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllLocalesResponse(rsp)
}

// CreateLocaleWithBodyWithResponse request with arbitrary body returning *CreateLocaleResponse
func (c *ClientWithResponses) CreateLocaleWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateLocaleResponse, error) {
	rsp, err := c.CreateLocaleWithBody(ctx, spaceId, environmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLocaleResponse(rsp)
}

func (c *ClientWithResponses) CreateLocaleWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, body CreateLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateLocaleResponse, error) {
	rsp, err := c.CreateLocale(ctx, spaceId, environmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateLocaleResponse(rsp)
}

// DeleteLocaleWithResponse request returning *DeleteLocaleResponse
func (c *ClientWithResponses) DeleteLocaleWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, reqEditors ...RequestEditorFn) (*DeleteLocaleResponse, error) {
	rsp, err := c.DeleteLocale(ctx, spaceId, environmentId, localeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocaleResponse(rsp)
}

// GetLocaleWithResponse request returning *GetLocaleResponse
func (c *ClientWithResponses) GetLocaleWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, reqEditors ...RequestEditorFn) (*GetLocaleResponse, error) {
	rsp, err := c.GetLocale(ctx, spaceId, environmentId, localeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocaleResponse(rsp)
}

// UpdateLocaleWithBodyWithResponse request with arbitrary body returning *UpdateLocaleResponse
func (c *ClientWithResponses) UpdateLocaleWithBodyWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateLocaleResponse, error) {
	rsp, err := c.UpdateLocaleWithBody(ctx, spaceId, environmentId, localeId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocaleResponse(rsp)
}

func (c *ClientWithResponses) UpdateLocaleWithResponse(ctx context.Context, spaceId SpaceId, environmentId EnvironmentId, localeId LocaleId, params *UpdateLocaleParams, body UpdateLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateLocaleResponse, error) {
	rsp, err := c.UpdateLocale(ctx, spaceId, environmentId, localeId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateLocaleResponse(rsp)
}

// GetAllPreviewApiKeysWithResponse request returning *GetAllPreviewApiKeysResponse
func (c *ClientWithResponses) GetAllPreviewApiKeysWithResponse(ctx context.Context, spaceId SpaceId, params *GetAllPreviewApiKeysParams, reqEditors ...RequestEditorFn) (*GetAllPreviewApiKeysResponse, error) {
	rsp, err := c.GetAllPreviewApiKeys(ctx, spaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllPreviewApiKeysResponse(rsp)
}

// GetPreviewApiKeyWithResponse request returning *GetPreviewApiKeyResponse
func (c *ClientWithResponses) GetPreviewApiKeyWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetPreviewApiKeyResponse, error) {
	rsp, err := c.GetPreviewApiKey(ctx, spaceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewApiKeyResponse(rsp)
}

// CreatePreviewEnvironmentWithBodyWithResponse request with arbitrary body returning *CreatePreviewEnvironmentResponse
func (c *ClientWithResponses) CreatePreviewEnvironmentWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePreviewEnvironmentResponse, error) {
	rsp, err := c.CreatePreviewEnvironmentWithBody(ctx, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePreviewEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreatePreviewEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, body CreatePreviewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePreviewEnvironmentResponse, error) {
	rsp, err := c.CreatePreviewEnvironment(ctx, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePreviewEnvironmentResponse(rsp)
}

// DeletePreviewEnvironmentWithResponse request returning *DeletePreviewEnvironmentResponse
func (c *ClientWithResponses) DeletePreviewEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *DeletePreviewEnvironmentParams, reqEditors ...RequestEditorFn) (*DeletePreviewEnvironmentResponse, error) {
	rsp, err := c.DeletePreviewEnvironment(ctx, spaceId, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePreviewEnvironmentResponse(rsp)
}

// GetPreviewEnvironmentWithResponse request returning *GetPreviewEnvironmentResponse
func (c *ClientWithResponses) GetPreviewEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, reqEditors ...RequestEditorFn) (*GetPreviewEnvironmentResponse, error) {
	rsp, err := c.GetPreviewEnvironment(ctx, spaceId, resourceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPreviewEnvironmentResponse(rsp)
}

// UpdatePreviewEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdatePreviewEnvironmentResponse
func (c *ClientWithResponses) UpdatePreviewEnvironmentWithBodyWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePreviewEnvironmentResponse, error) {
	rsp, err := c.UpdatePreviewEnvironmentWithBody(ctx, spaceId, resourceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePreviewEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) UpdatePreviewEnvironmentWithResponse(ctx context.Context, spaceId SpaceId, resourceId ResourceId, params *UpdatePreviewEnvironmentParams, body UpdatePreviewEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePreviewEnvironmentResponse, error) {
	rsp, err := c.UpdatePreviewEnvironment(ctx, spaceId, resourceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePreviewEnvironmentResponse(rsp)
}

// GetAllWebhooksWithResponse request returning *GetAllWebhooksResponse
func (c *ClientWithResponses) GetAllWebhooksWithResponse(ctx context.Context, spaceId SpaceId, params *GetAllWebhooksParams, reqEditors ...RequestEditorFn) (*GetAllWebhooksResponse, error) {
	rsp, err := c.GetAllWebhooks(ctx, spaceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllWebhooksResponse(rsp)
}

// CreateWebhookWithBodyWithResponse request with arbitrary body returning *CreateWebhookResponse
func (c *ClientWithResponses) CreateWebhookWithBodyWithResponse(ctx context.Context, spaceId SpaceId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhookWithBody(ctx, spaceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhookWithResponse(ctx context.Context, spaceId SpaceId, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhook(ctx, spaceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

// DeleteWebhookWithResponse request returning *DeleteWebhookResponse
func (c *ClientWithResponses) DeleteWebhookWithResponse(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *DeleteWebhookParams, reqEditors ...RequestEditorFn) (*DeleteWebhookResponse, error) {
	rsp, err := c.DeleteWebhook(ctx, spaceId, webhookId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhookResponse(rsp)
}

// GetWebhookWithResponse request returning *GetWebhookResponse
func (c *ClientWithResponses) GetWebhookWithResponse(ctx context.Context, spaceId SpaceId, webhookId WebhookId, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error) {
	rsp, err := c.GetWebhook(ctx, spaceId, webhookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookResponse(rsp)
}

// UpdateWebhookWithBodyWithResponse request with arbitrary body returning *UpdateWebhookResponse
func (c *ClientWithResponses) UpdateWebhookWithBodyWithResponse(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWebhookResponse, error) {
	rsp, err := c.UpdateWebhookWithBody(ctx, spaceId, webhookId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhookResponse(rsp)
}

func (c *ClientWithResponses) UpdateWebhookWithResponse(ctx context.Context, spaceId SpaceId, webhookId WebhookId, params *UpdateWebhookParams, body UpdateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWebhookResponse, error) {
	rsp, err := c.UpdateWebhook(ctx, spaceId, webhookId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWebhookResponse(rsp)
}

// ParseGetAllAppDefinitionsResponse parses an HTTP response from a GetAllAppDefinitionsWithResponse call
func ParseGetAllAppDefinitionsResponse(rsp *http.Response) (*GetAllAppDefinitionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAppDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDefinitionCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAppDefinitionResponse parses an HTTP response from a CreateAppDefinitionWithResponse call
func ParseCreateAppDefinitionResponse(rsp *http.Response) (*CreateAppDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAppDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAppDefinitionResponse parses an HTTP response from a DeleteAppDefinitionWithResponse call
func ParseDeleteAppDefinitionResponse(rsp *http.Response) (*DeleteAppDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAppDefinitionResponse parses an HTTP response from a GetAppDefinitionWithResponse call
func ParseGetAppDefinitionResponse(rsp *http.Response) (*GetAppDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAppDefinitionResponse parses an HTTP response from a UpdateAppDefinitionWithResponse call
func ParseUpdateAppDefinitionResponse(rsp *http.Response) (*UpdateAppDefinitionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAppDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppDefinition
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAppBundleResponse parses an HTTP response from a CreateAppBundleWithResponse call
func ParseCreateAppBundleResponse(rsp *http.Response) (*CreateAppBundleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAppBundleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Sys SystemPropertiesBase `json:"sys"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUploadAppResponse parses an HTTP response from a UploadAppWithResponse call
func ParseUploadAppResponse(rsp *http.Response) (*UploadAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Sys SystemPropertiesBase `json:"sys"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAllSpacesResponse parses an HTTP response from a GetAllSpacesWithResponse call
func ParseGetAllSpacesResponse(rsp *http.Response) (*GetAllSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpaceCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSpaceResponse parses an HTTP response from a CreateSpaceWithResponse call
func ParseCreateSpaceResponse(rsp *http.Response) (*CreateSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Space
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSpaceResponse parses an HTTP response from a DeleteSpaceWithResponse call
func ParseDeleteSpaceResponse(rsp *http.Response) (*DeleteSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSpaceResponse parses an HTTP response from a GetSpaceWithResponse call
func ParseGetSpaceResponse(rsp *http.Response) (*GetSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Space
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSpaceResponse parses an HTTP response from a UpdateSpaceWithResponse call
func ParseUpdateSpaceResponse(rsp *http.Response) (*UpdateSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Space
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllApiKeysResponse parses an HTTP response from a GetAllApiKeysWithResponse call
func ParseGetAllApiKeysResponse(rsp *http.Response) (*GetAllApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKeyCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApiKeyResponse parses an HTTP response from a CreateApiKeyWithResponse call
func ParseCreateApiKeyResponse(rsp *http.Response) (*CreateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApiKeyResponse parses an HTTP response from a DeleteApiKeyWithResponse call
func ParseDeleteApiKeyResponse(rsp *http.Response) (*DeleteApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiKeyResponse parses an HTTP response from a GetApiKeyWithResponse call
func ParseGetApiKeyResponse(rsp *http.Response) (*GetApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateApiKeyResponse parses an HTTP response from a UpdateApiKeyWithResponse call
func ParseUpdateApiKeyResponse(rsp *http.Response) (*UpdateApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllEnvironmentsResponse parses an HTTP response from a GetAllEnvironmentsWithResponse call
func ParseGetAllEnvironmentsResponse(rsp *http.Response) (*GetAllEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EnvironmentCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentResponse parses an HTTP response from a DeleteEnvironmentWithResponse call
func ParseDeleteEnvironmentResponse(rsp *http.Response) (*DeleteEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEnvironmentResponse parses an HTTP response from a GetEnvironmentWithResponse call
func ParseGetEnvironmentResponse(rsp *http.Response) (*GetEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllAppInstallationsResponse parses an HTTP response from a GetAllAppInstallationsWithResponse call
func ParseGetAllAppInstallationsResponse(rsp *http.Response) (*GetAllAppInstallationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAppInstallationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInstallationCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAppInstallationResponse parses an HTTP response from a DeleteAppInstallationWithResponse call
func ParseDeleteAppInstallationResponse(rsp *http.Response) (*DeleteAppInstallationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppInstallationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAppInstallationResponse parses an HTTP response from a GetAppInstallationWithResponse call
func ParseGetAppInstallationResponse(rsp *http.Response) (*GetAppInstallationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppInstallationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInstallation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpsertAppInstallationResponse parses an HTTP response from a UpsertAppInstallationWithResponse call
func ParseUpsertAppInstallationResponse(rsp *http.Response) (*UpsertAppInstallationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertAppInstallationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppInstallation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AppInstallation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAllAssetsResponse parses an HTTP response from a GetAllAssetsWithResponse call
func ParseGetAllAssetsResponse(rsp *http.Response) (*GetAllAssetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAssetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AssetCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAssetResponse parses an HTTP response from a CreateAssetWithResponse call
func ParseCreateAssetResponse(rsp *http.Response) (*CreateAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAssetResponse parses an HTTP response from a DeleteAssetWithResponse call
func ParseDeleteAssetResponse(rsp *http.Response) (*DeleteAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAssetResponse parses an HTTP response from a GetAssetWithResponse call
func ParseGetAssetResponse(rsp *http.Response) (*GetAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAssetResponse parses an HTTP response from a UpdateAssetWithResponse call
func ParseUpdateAssetResponse(rsp *http.Response) (*UpdateAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUnarchiveAssetResponse parses an HTTP response from a UnarchiveAssetWithResponse call
func ParseUnarchiveAssetResponse(rsp *http.Response) (*UnarchiveAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnarchiveAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArchiveAssetResponse parses an HTTP response from a ArchiveAssetWithResponse call
func ParseArchiveAssetResponse(rsp *http.Response) (*ArchiveAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProcessAssetResponse parses an HTTP response from a ProcessAssetWithResponse call
func ParseProcessAssetResponse(rsp *http.Response) (*ProcessAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProcessAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUnpublishAssetResponse parses an HTTP response from a UnpublishAssetWithResponse call
func ParseUnpublishAssetResponse(rsp *http.Response) (*UnpublishAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnpublishAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePublishAssetResponse parses an HTTP response from a PublishAssetWithResponse call
func ParsePublishAssetResponse(rsp *http.Response) (*PublishAssetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishAssetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Asset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllContentTypesResponse parses an HTTP response from a GetAllContentTypesWithResponse call
func ParseGetAllContentTypesResponse(rsp *http.Response) (*GetAllContentTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllContentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentTypeCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateContentTypeResponse parses an HTTP response from a CreateContentTypeWithResponse call
func ParseCreateContentTypeResponse(rsp *http.Response) (*CreateContentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateContentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteContentTypeResponse parses an HTTP response from a DeleteContentTypeWithResponse call
func ParseDeleteContentTypeResponse(rsp *http.Response) (*DeleteContentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteContentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetContentTypeResponse parses an HTTP response from a GetContentTypeWithResponse call
func ParseGetContentTypeResponse(rsp *http.Response) (*GetContentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateContentTypeResponse parses an HTTP response from a UpdateContentTypeWithResponse call
func ParseUpdateContentTypeResponse(rsp *http.Response) (*UpdateContentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateContentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ContentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetEditorInterfaceResponse parses an HTTP response from a GetEditorInterfaceWithResponse call
func ParseGetEditorInterfaceResponse(rsp *http.Response) (*GetEditorInterfaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEditorInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EditorInterface
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEditorInterfaceResponse parses an HTTP response from a UpdateEditorInterfaceWithResponse call
func ParseUpdateEditorInterfaceResponse(rsp *http.Response) (*UpdateEditorInterfaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEditorInterfaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EditorInterface
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeactivateContentTypeResponse parses an HTTP response from a DeactivateContentTypeWithResponse call
func ParseDeactivateContentTypeResponse(rsp *http.Response) (*DeactivateContentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeactivateContentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActivateContentTypeResponse parses an HTTP response from a ActivateContentTypeWithResponse call
func ParseActivateContentTypeResponse(rsp *http.Response) (*ActivateContentTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateContentTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllEntriesResponse parses an HTTP response from a GetAllEntriesWithResponse call
func ParseGetAllEntriesResponse(rsp *http.Response) (*GetAllEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntryCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEntryResponse parses an HTTP response from a CreateEntryWithResponse call
func ParseCreateEntryResponse(rsp *http.Response) (*CreateEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteEntryResponse parses an HTTP response from a DeleteEntryWithResponse call
func ParseDeleteEntryResponse(rsp *http.Response) (*DeleteEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEntryResponse parses an HTTP response from a GetEntryWithResponse call
func ParseGetEntryResponse(rsp *http.Response) (*GetEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEntryResponse parses an HTTP response from a UpdateEntryWithResponse call
func ParseUpdateEntryResponse(rsp *http.Response) (*UpdateEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUnarchiveEntryResponse parses an HTTP response from a UnarchiveEntryWithResponse call
func ParseUnarchiveEntryResponse(rsp *http.Response) (*UnarchiveEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnarchiveEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseArchiveEntryResponse parses an HTTP response from a ArchiveEntryWithResponse call
func ParseArchiveEntryResponse(rsp *http.Response) (*ArchiveEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnpublishEntryResponse parses an HTTP response from a UnpublishEntryWithResponse call
func ParseUnpublishEntryResponse(rsp *http.Response) (*UnpublishEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnpublishEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePublishEntryResponse parses an HTTP response from a PublishEntryWithResponse call
func ParsePublishEntryResponse(rsp *http.Response) (*PublishEntryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishEntryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllLocalesResponse parses an HTTP response from a GetAllLocalesWithResponse call
func ParseGetAllLocalesResponse(rsp *http.Response) (*GetAllLocalesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllLocalesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocaleCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateLocaleResponse parses an HTTP response from a CreateLocaleWithResponse call
func ParseCreateLocaleResponse(rsp *http.Response) (*CreateLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Locale
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteLocaleResponse parses an HTTP response from a DeleteLocaleWithResponse call
func ParseDeleteLocaleResponse(rsp *http.Response) (*DeleteLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLocaleResponse parses an HTTP response from a GetLocaleWithResponse call
func ParseGetLocaleResponse(rsp *http.Response) (*GetLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Locale
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateLocaleResponse parses an HTTP response from a UpdateLocaleWithResponse call
func ParseUpdateLocaleResponse(rsp *http.Response) (*UpdateLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Locale
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllPreviewApiKeysResponse parses an HTTP response from a GetAllPreviewApiKeysWithResponse call
func ParseGetAllPreviewApiKeysResponse(rsp *http.Response) (*GetAllPreviewApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllPreviewApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreviewApiKeyCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPreviewApiKeyResponse parses an HTTP response from a GetPreviewApiKeyWithResponse call
func ParseGetPreviewApiKeyResponse(rsp *http.Response) (*GetPreviewApiKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewApiKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreviewApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePreviewEnvironmentResponse parses an HTTP response from a CreatePreviewEnvironmentWithResponse call
func ParseCreatePreviewEnvironmentResponse(rsp *http.Response) (*CreatePreviewEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePreviewEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PreviewEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeletePreviewEnvironmentResponse parses an HTTP response from a DeletePreviewEnvironmentWithResponse call
func ParseDeletePreviewEnvironmentResponse(rsp *http.Response) (*DeletePreviewEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePreviewEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPreviewEnvironmentResponse parses an HTTP response from a GetPreviewEnvironmentWithResponse call
func ParseGetPreviewEnvironmentResponse(rsp *http.Response) (*GetPreviewEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPreviewEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreviewEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePreviewEnvironmentResponse parses an HTTP response from a UpdatePreviewEnvironmentWithResponse call
func ParseUpdatePreviewEnvironmentResponse(rsp *http.Response) (*UpdatePreviewEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePreviewEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreviewEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllWebhooksResponse parses an HTTP response from a GetAllWebhooksWithResponse call
func ParseGetAllWebhooksResponse(rsp *http.Response) (*GetAllWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookCollection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWebhookResponse parses an HTTP response from a CreateWebhookWithResponse call
func ParseCreateWebhookResponse(rsp *http.Response) (*CreateWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Webhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteWebhookResponse parses an HTTP response from a DeleteWebhookWithResponse call
func ParseDeleteWebhookResponse(rsp *http.Response) (*DeleteWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWebhookResponse parses an HTTP response from a GetWebhookWithResponse call
func ParseGetWebhookResponse(rsp *http.Response) (*GetWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Webhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWebhookResponse parses an HTTP response from a UpdateWebhookWithResponse call
func ParseUpdateWebhookResponse(rsp *http.Response) (*UpdateWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Webhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
